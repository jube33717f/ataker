{"ast":null,"code":"var _jsxFileName = \"/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/browse-tasks/browse-tasks-right/task-detail/offer-section/offer-section.js\";\nimport React from \"react\";\nimport { withRouter, Link } from \"react-router-dom\";\nimport ToggleTextbox from \"../../../../../components/toggle-textbox/toggle-textbox\";\nimport JobOffer from \"../../../../../assets/job-offer.svg\";\nimport { get_time_diff } from \"../../../../../utils/time-difference\";\nimport { reqUpdateTask } from \"../../../../../api/api\";\nimport { connect } from \"react-redux\";\nimport { addTaskDetail } from \"../../../../../redux/actions\"; // TODO @SONIA\n\nclass OfferSection extends React.Component {\n  constructor() {\n    super();\n\n    this.acceptOffer = async offer => {\n      const taskId = this.props.match.params.id;\n\n      try {\n        const result = await reqUpdateTask(taskId, { ...this.props.taskData,\n          status: 'assigned',\n          offers: [offer]\n        }); //accept offer时改变task.status，并在task.offers里删除除assignee之外的所有offer\n\n        if (result.status === 0) {\n          this.props.addTaskDetail(result.data);\n        }\n      } catch (error) {\n        alert(\"failed to request task detail\");\n      }\n    };\n\n    this.pushToGeneratedUrl = pathname => {\n      this.props.history.push(`${this.props.match.url}/${pathname}/${this.props.match.params[0]}-${this.props.match.params.id}`);\n    };\n  }\n\n  render() {\n    const userEmail = this.props.user.email;\n    const {\n      taskData,\n      userRole\n    } = this.props.taskDetail;\n    const {\n      status,\n      offers\n    } = taskData;\n    return React.createElement(\"div\", {\n      className: \"task-detail__offer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"splitter-section-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, status === 'open' ? 'Offers' : 'Assignee'), offers && offers.length !== 0 ? offers.map(offer => offer.messages.map((message, index) => index === 0 ? React.createElement(\"div\", {\n      className: \"task-detail__offer--offerer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(ToggleTextbox, {\n      message: message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), userRole === \"poster\" && React.createElement(React.Fragment, null, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"$\", offer.price), React.createElement(\"div\", {\n      className: `green-button ${status !== \"open\" && 'button--disabled'} `,\n      onClick: () => {\n        this.acceptOffer(offer);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, status === \"open\" ? 'Accept' : 'Accepted'))) : React.createElement(\"div\", {\n      className: \"task-detail__offer--reply\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"avatar-image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: message.photo,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"poster-detail__item--detail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"user-name-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"\",\n      className: \"user-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, message.username)), message.messageContent, React.createElement(\"div\", {\n      className: \"toggle-textbox__message--bottom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, get_time_diff(message.postDate), \" ago\"), userEmail && React.createElement(Link, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Reply\")))))) : React.createElement(\"div\", {\n      className: \"task-detail__offer--no-offer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: JobOffer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"green-button\",\n      onClick: () => {\n        //如果没登陆的话自动跳转登陆\n        if (!userEmail) {\n          this.props.history.push(`${this.props.match.url}/login`);\n        } else {\n          this.pushToGeneratedUrl('make-an-offer');\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Make an offer\")));\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user,\n  taskDetail: state.taskDetail\n}), {\n  addTaskDetail\n})(withRouter(OfferSection));","map":{"version":3,"sources":["/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/browse-tasks/browse-tasks-right/task-detail/offer-section/offer-section.js"],"names":["React","withRouter","Link","ToggleTextbox","get_time_diff","reqUpdateTask","connect","addTaskDetail","OfferSection","Component","constructor","acceptOffer","offer","taskId","props","match","params","id","result","taskData","status","offers","data","error","alert","pushToGeneratedUrl","pathname","history","push","url","render","userEmail","user","email","userRole","taskDetail","length","map","messages","message","index","price","photo","username","messageContent","postDate","JobOffer","state"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { withRouter, Link } from \"react-router-dom\";\nimport ToggleTextbox from \"../../../../../components/toggle-textbox/toggle-textbox\";\nimport JobOffer from \"../../../../../assets/job-offer.svg\";\nimport { get_time_diff } from \"../../../../../utils/time-difference\";\nimport { reqUpdateTask } from \"../../../../../api/api\";\nimport { connect } from \"react-redux\";\nimport { addTaskDetail } from \"../../../../../redux/actions\"\n// TODO @SONIA\n\nclass OfferSection extends React.Component {\n    constructor() {\n        super();\n    }\n\n    acceptOffer = async (offer) => {\n        const taskId = this.props.match.params.id;\n        try {\n            const result = await reqUpdateTask(taskId, { ...this.props.taskData, status: 'assigned', offers: [offer] }); //accept offer时改变task.status，并在task.offers里删除除assignee之外的所有offer\n            if (result.status === 0) {\n                this.props.addTaskDetail(result.data);\n            }\n        } catch (error) {\n            alert(\"failed to request task detail\");\n        }\n    }\n\n    pushToGeneratedUrl = (pathname) => {\n        this.props.history.push(\n            `${this.props.match.url}/${pathname}/${this.props.match.params[0]}-${this.props.match.params.id}`\n        );\n    }\n\n    render() {\n        const userEmail = this.props.user.email;\n        const { taskData, userRole } = this.props.taskDetail;\n        const { status, offers } = taskData;\n\n        return (<div className=\"task-detail__offer\">\n            <div className=\"splitter-section-name\">\n                {status === 'open' ? 'Offers' : 'Assignee'}\n            </div>\n            {/* 这里默认如果assign task后，offers里面就只有assignee的offer */}\n            {offers && offers.length !== 0\n                ?\n                offers.map((offer) =>\n                    offer.messages.map((message, index) =>\n                        index === 0\n                            ?\n                            <div className=\"task-detail__offer--offerer\">\n                                <ToggleTextbox message={message} />\n                                {userRole === \"poster\" && <>\n                                    <h3>\n                                        ${offer.price}\n                                    </h3>\n                                    <div className={`green-button ${status !== \"open\" && 'button--disabled'} `} onClick={() => { this.acceptOffer(offer) }}>\n                                        {status === \"open\" ? 'Accept' : 'Accepted'}\n                                    </div></>}\n                            </div>\n                            :\n                            <div className=\"task-detail__offer--reply\">\n                                <div className=\"avatar-image\">\n                                    <img src={message.photo} alt=\"\" />\n                                </div>\n                                <div className=\"poster-detail__item--detail\">\n                                    <div className=\"user-name-holder\">\n                                        <Link to=\"\" className=\"user-name\">\n                                            {message.username}\n                                        </Link>\n                                    </div>\n                                    {message.messageContent}\n\n                                    <div className=\"toggle-textbox__message--bottom\"><span>{get_time_diff(message.postDate)} ago</span>\n                                        {userEmail && <Link>Reply</Link>}\n                                    </div>\n                                </div>\n                            </div>\n                    )\n                )\n                :\n                <div className=\"task-detail__offer--no-offer\">\n                    <img src={JobOffer} ></img>\n                    <div className=\"green-button\" onClick={() => {\n                        //如果没登陆的话自动跳转登陆\n                        if (!userEmail) {\n                            this.props.history.push(`${this.props.match.url}/login`);\n                        } else {\n                            this.pushToGeneratedUrl('make-an-offer')\n                        }\n                    }}>Make an offer</div>\n                </div>\n            }\n        </div>\n        );\n    }\n}\nexport default connect(state => ({ user: state.user, taskDetail: state.taskDetail }), { addTaskDetail })(withRouter(OfferSection));"]},"metadata":{},"sourceType":"module"}