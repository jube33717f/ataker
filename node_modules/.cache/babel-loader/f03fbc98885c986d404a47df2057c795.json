{"ast":null,"code":"var _jsxFileName = \"/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/browse-tasks/browse-tasks-right/map-box/map.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\nconst mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%'\n  }\n};\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n    CurrentLocation.defaultProps = {\n      zoom: 14,\n      initialCenter: {\n        lat: -1.2884,\n        lng: 36.8233\n      },\n      centerAroundCurrentLocation: false,\n      visible: true\n    };\n    const {\n      lat,\n      lng\n    } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n\n    this.loadMap();\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const {\n        google\n      } = this.props;\n      const maps = google.maps;\n      const mapRef = this.refs.map; // reference to the actual DOM element\n\n      const node = ReactDOM.findDOMNode(mapRef);\n      let {\n        zoom\n      } = this.props;\n      const {\n        lat,\n        lng\n      } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: zoom\n      }); // maps.Map() is constructor that instantiates the map\n\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  renderChildren() {\n    const {\n      children\n    } = this.props;\n    if (!children) return;\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: style,\n      ref: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Loading map...\"), this.renderChildren());\n  }\n\n}\nexport default CurrentLocation;","map":{"version":3,"sources":["/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/browse-tasks/browse-tasks-right/map-box/map.js"],"names":["React","ReactDOM","Map","GoogleApiWrapper","InfoWindow","Marker","mapStyles","map","position","width","height","CurrentLocation","Component","constructor","props","defaultProps","zoom","initialCenter","lat","lng","centerAroundCurrentLocation","visible","state","currentLocation","componentDidUpdate","prevProps","prevState","google","loadMap","recenterMap","current","maps","center","LatLng","panTo","componentDidMount","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","mapRef","refs","node","findDOMNode","mapConfig","Object","assign","renderChildren","children","Children","c","cloneElement","mapCenter","render","style"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Map, GoogleApiWrapper, InfoWindow, Marker  } from 'google-maps-react';\nconst mapStyles = {\n    map: {\n      position: 'absolute',\n      width: '100%',\n      height: '100%'\n    }\n  };\n\nexport class CurrentLocation extends React.Component {\n    constructor(props) {\n      super(props);\n          CurrentLocation.defaultProps = {\n    zoom: 14,\n    initialCenter: {\n      lat: -1.2884,\n      lng: 36.8233\n    },\n    centerAroundCurrentLocation: false,\n    visible: true\n  };\n      const { lat, lng } = this.props.initialCenter;\n      this.state = {\n        currentLocation: {\n          lat: lat,\n          lng: lng\n        }\n      };\n    }\n  \n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.google !== this.props.google) {\n          this.loadMap();\n        }\n        if (prevState.currentLocation !== this.state.currentLocation) {\n          this.recenterMap();\n        }\n      }\n    recenterMap() {\n        const map = this.map;\n        const current = this.state.currentLocation;\n\n        const google = this.props.google;\n        const maps = google.maps;\n\n        if (map) {\n        let center = new maps.LatLng(current.lat, current.lng);\n        map.panTo(center);\n        }\n    }\n    componentDidMount() {\n        if (this.props.centerAroundCurrentLocation) {\n          if (navigator && navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(pos => {\n              const coords = pos.coords;\n              this.setState({\n                currentLocation: {\n                  lat: coords.latitude,\n                  lng: coords.longitude\n                }\n              });\n            });\n          }\n        }\n        this.loadMap();\n    }\n    loadMap() {\n        if (this.props && this.props.google) {\n          // checks if google is available\n          const { google } = this.props;\n          const maps = google.maps;\n    \n          const mapRef = this.refs.map;\n    \n          // reference to the actual DOM element\n          const node = ReactDOM.findDOMNode(mapRef);\n    \n          let { zoom } = this.props;\n          const { lat, lng } = this.state.currentLocation;\n          const center = new maps.LatLng(lat, lng);\n          const mapConfig = Object.assign(\n            {},\n            {\n              center: center,\n              zoom: zoom\n            }\n          );\n    \n          // maps.Map() is constructor that instantiates the map\n          this.map = new maps.Map(node, mapConfig);\n        }\n      }\n      renderChildren() {\n        const { children } = this.props;\n    \n        if (!children) return;\n    \n        return React.Children.map(children, c => {\n          if (!c) return;\n          return React.cloneElement(c, {\n            map: this.map,\n            google: this.props.google,\n            mapCenter: this.state.currentLocation\n          });\n        });\n      }\n      render() {\n        const style = Object.assign({}, mapStyles.map);\n       return (\n         <div>\n           <div style={style} ref=\"map\">\n             Loading map...\n           </div>\n           {this.renderChildren()}\n         </div>\n       );\n     }\n  }\n  export default CurrentLocation;"]},"metadata":{},"sourceType":"module"}