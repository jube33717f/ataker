{"ast":null,"code":"var _jsxFileName = \"/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/browse-tasks/browse-tasks-right/map-box/map-box.js\";\nimport React, { Component } from \"react\";\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\nimport ReactDOM from 'react-dom'; // TODO @DAVIN\n\nconst mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%'\n  }\n};\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: -1.2884,\n    lng: 36.8233\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n      lat,\n      lng\n    } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n\n    this.loadMap();\n  }\n\n}\nexport class MapBox extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showingInfoWindow: false,\n      //Hides or the shows the infoWindow\n      activeMarker: {},\n      //Shows the active marker upon click\n      selectedPlace: {} //Shows the infoWindow to the selected place upon a marker\n\n    };\n\n    this.onMarkerClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Map, {\n      google: this.props.google,\n      zoom: 14,\n      style: mapStyles,\n      initialCenter: {\n        lat: -1.2884,\n        lng: 36.8233\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    });\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDy7fG8VcN_upR7UZ7lC63h7cVbVwYu558'\n})(MapBox); // export default class MapBox extends Component {\n//   render() {\n//     return (\n//     <div>Map</div>           \n//     );\n//   }\n// }","map":{"version":3,"sources":["/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/browse-tasks/browse-tasks-right/map-box/map-box.js"],"names":["React","Component","Map","GoogleApiWrapper","InfoWindow","Marker","ReactDOM","mapStyles","map","position","width","height","CurrentLocation","defaultProps","zoom","initialCenter","lat","lng","centerAroundCurrentLocation","visible","constructor","props","state","currentLocation","componentDidUpdate","prevProps","prevState","google","loadMap","recenterMap","current","maps","center","LatLng","panTo","componentDidMount","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","MapBox","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","marker","e","onClose","render","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Map, GoogleApiWrapper, InfoWindow, Marker  } from 'google-maps-react';\nimport ReactDOM from 'react-dom';\n// TODO @DAVIN\nconst mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%'\n  }\n};\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: -1.2884,\n    lng: 36.8233\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { lat, lng } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n    this.loadMap();\n  }\n\n\n\n}\nexport class MapBox extends Component {\n  \n  state = {\n      showingInfoWindow: false,  //Hides or the shows the infoWindow\n      activeMarker: {},          //Shows the active marker upon click\n      selectedPlace: {}          //Shows the infoWindow to the selected place upon a marker\n  };\n  \n  onMarkerClick = (props, marker, e) =>\n  this.setState({\n    selectedPlace: props,\n    activeMarker: marker,\n    showingInfoWindow: true\n  });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n  render() {\n    return (\n      <Map\n        google={this.props.google}\n        zoom={14}\n        style={mapStyles}\n        initialCenter={{\n         lat: -1.2884,\n         lng: 36.8233\n        }}\n      />\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDy7fG8VcN_upR7UZ7lC63h7cVbVwYu558'\n})(MapBox);\n// export default class MapBox extends Component {\n//   render() {\n//     return (\n//     <div>Map</div>           \n    \n//     );\n  \n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}