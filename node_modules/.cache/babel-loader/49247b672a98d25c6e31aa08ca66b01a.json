{"ast":null,"code":"var _jsxFileName = \"/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/browse-tasks/browse-tasks-right/task-detail/reply-form/reply-form.js\";\nimport React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport TextEditor from \"../../../../../components/text-editor/text-editor\";\nimport BlurBackgroundHoc from \"../../../../../hoc/blurBackgroundHoc\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faWindowClose } from \"@fortawesome/free-solid-svg-icons\";\nimport { connect } from \"react-redux\";\nimport { deleteLastSubPath } from \"../../../../../utils/path-generator\";\nimport { reloadTaskDetail } from \"../../../../../redux/actions\";\nimport \"./reply-form.scss\";\nimport { reqReplyQuestion, reqPostOfferMessage } from \"../../../../../api/api\"; // TODO @SONIA\n\nconst {\n  BASE\n} = global.constants;\n\nclass ReplyForm extends React.Component {\n  constructor() {\n    super();\n\n    this.sendReply = async () => {\n      const {\n        pathname\n      } = this.props.location;\n\n      try {\n        const messageData = {\n          content: this.state.message\n        };\n        let result;\n\n        if (this.props.location.pathname.includes('reply-offer')) {\n          messageData.targetId = this.props.match.params.targetId;\n          result = await reqPostOfferMessage(this.props.user.email, messageData);\n        } else if (this.props.location.pathname.includes('reply-question')) {\n          messageData.repliedQuestionId = this.props.match.params.targetId;\n          result = await reqReplyQuestion(this.props.user.email, messageData);\n        }\n\n        if (result.status === 200) {\n          this.props.reloadTaskDetail(true);\n          this.props.history.push(deleteLastSubPath(pathname));\n        }\n      } catch (e) {\n        alert('Failed to post question');\n      }\n    };\n\n    this.state = {\n      message: ''\n    };\n  }\n\n  componentDidMount() {\n    this.props.blurBackground();\n  }\n\n  componentWillUnmount() {\n    this.props.resetBackground();\n  }\n\n  render() {\n    const {\n      pathname\n    } = this.props.location;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container--not-blured\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"reply-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form__header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Reply\", React.createElement(FontAwesomeIcon, {\n      icon: faWindowClose,\n      className: \"button-close\",\n      onClick: () => {\n        this.props.history.push(deleteLastSubPath(pathname));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"auth-form__content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(TextEditor, {\n      onChange: e => this.setState({\n        message: e.target.value\n      }),\n      value: this.state.message,\n      disableSendButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"bottom-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.sendReply,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Send\")))));\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user\n}), {\n  reloadTaskDetail\n})(BlurBackgroundHoc(withRouter(ReplyForm)));","map":{"version":3,"sources":["/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/browse-tasks/browse-tasks-right/task-detail/reply-form/reply-form.js"],"names":["React","Link","withRouter","TextEditor","BlurBackgroundHoc","FontAwesomeIcon","faWindowClose","connect","deleteLastSubPath","reloadTaskDetail","reqReplyQuestion","reqPostOfferMessage","BASE","global","constants","ReplyForm","Component","constructor","sendReply","pathname","props","location","messageData","content","state","message","result","includes","targetId","match","params","user","email","repliedQuestionId","status","history","push","e","alert","componentDidMount","blurBackground","componentWillUnmount","resetBackground","render","setState","target","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,kBAAjC;AACA,OAAOC,UAAP,MAAuB,mDAAvB;AACA,OAAOC,iBAAP,MAA8B,sCAA9B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,aAAT,QAA8B,mCAA9B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,OAAO,mBAAP;AAEA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,wBAAtD,C,CAEA;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAWC,MAAM,CAACC,SAAxB;;AAEA,MAAMC,SAAN,SAAwBf,KAAK,CAACgB,SAA9B,CAAwC;AACpCC,EAAAA,WAAW,GAAG;AACV;;AADU,SAgBdC,SAhBc,GAgBF,YAAY;AACpB,YAAM;AAAEC,QAAAA;AAAF,UAAe,KAAKC,KAAL,CAAWC,QAAhC;;AAEA,UAAI;AACA,cAAMC,WAAW,GAAG;AAChBC,UAAAA,OAAO,EAAE,KAAKC,KAAL,CAAWC;AADJ,SAApB;AAGA,YAAIC,MAAJ;;AACA,YAAI,KAAKN,KAAL,CAAWC,QAAX,CAAoBF,QAApB,CAA6BQ,QAA7B,CAAsC,aAAtC,CAAJ,EAA0D;AACtDL,UAAAA,WAAW,CAACM,QAAZ,GAAuB,KAAKR,KAAL,CAAWS,KAAX,CAAiBC,MAAjB,CAAwBF,QAA/C;AAEAF,UAAAA,MAAM,GAAG,MAAMf,mBAAmB,CAAC,KAAKS,KAAL,CAAWW,IAAX,CAAgBC,KAAjB,EAAwBV,WAAxB,CAAlC;AACH,SAJD,MAIO,IAAI,KAAKF,KAAL,CAAWC,QAAX,CAAoBF,QAApB,CAA6BQ,QAA7B,CAAsC,gBAAtC,CAAJ,EAA6D;AAChEL,UAAAA,WAAW,CAACW,iBAAZ,GAAgC,KAAKb,KAAL,CAAWS,KAAX,CAAiBC,MAAjB,CAAwBF,QAAxD;AACAF,UAAAA,MAAM,GAAG,MAAMhB,gBAAgB,CAAC,KAAKU,KAAL,CAAWW,IAAX,CAAgBC,KAAjB,EAAwBV,WAAxB,CAA/B;AACH;;AAED,YAAII,MAAM,CAACQ,MAAP,KAAkB,GAAtB,EAA2B;AACvB,eAAKd,KAAL,CAAWX,gBAAX,CAA4B,IAA5B;AACA,eAAKW,KAAL,CAAWe,OAAX,CAAmBC,IAAnB,CAAwB5B,iBAAiB,CAACW,QAAD,CAAzC;AACH;AACJ,OAlBD,CAkBE,OAAOkB,CAAP,EAAU;AACRC,QAAAA,KAAK,CAAC,yBAAD,CAAL;AACH;AACJ,KAxCa;;AAEV,SAAKd,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE;AADA,KAAb;AAGH;;AAGDc,EAAAA,iBAAiB,GAAG;AAChB,SAAKnB,KAAL,CAAWoB,cAAX;AACH;;AAEDC,EAAAA,oBAAoB,GAAG;AACnB,SAAKrB,KAAL,CAAWsB,eAAX;AACH;;AA6BDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAExB,MAAAA;AAAF,QAAe,KAAKC,KAAL,CAAWC,QAAhC;AACA,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAEQ,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAEf,aAAvB;AAAsC,MAAA,SAAS,EAAC,cAAhD;AACA,MAAA,OAAO,EAAE,MAAM;AACX,aAAKc,KAAL,CAAWe,OAAX,CAAmBC,IAAnB,CAAwB5B,iBAAiB,CAACW,QAAD,CAAzC;AACH,OAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFR,CADJ,CADJ,EAWI;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AACI,MAAA,QAAQ,EAAGkB,CAAD,IAAO,KAAKO,QAAL,CAAc;AAAEnB,QAAAA,OAAO,EAAEY,CAAC,CAACQ,MAAF,CAASC;AAApB,OAAd,CADrB;AAEI,MAAA,KAAK,EAAE,KAAKtB,KAAL,CAAWC,OAFtB;AAGI,MAAA,iBAAiB,EAAE,IAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAXJ,EAmBI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,OAAO,EAAE,KAAKP,SADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CAnBJ,CADJ,CADJ,CADJ;AAgCH;;AA9EmC;;AAiFxC,eAAeX,OAAO,CAACiB,KAAK,KAAK;AAAEO,EAAAA,IAAI,EAAEP,KAAK,CAACO;AAAd,CAAL,CAAN,EAAkC;AAAEtB,EAAAA;AAAF,CAAlC,CAAP,CACXL,iBAAiB,CAACF,UAAU,CAACa,SAAD,CAAX,CADN,CAAf","sourcesContent":["import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport TextEditor from \"../../../../../components/text-editor/text-editor\"\nimport BlurBackgroundHoc from \"../../../../../hoc/blurBackgroundHoc\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faWindowClose } from \"@fortawesome/free-solid-svg-icons\";\nimport { connect } from \"react-redux\";\nimport { deleteLastSubPath } from \"../../../../../utils/path-generator\"\nimport { reloadTaskDetail } from \"../../../../../redux/actions\"\nimport \"./reply-form.scss\"\n\nimport { reqReplyQuestion, reqPostOfferMessage } from \"../../../../../api/api\"\n\n// TODO @SONIA\nconst { BASE } = global.constants;\n\nclass ReplyForm extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            message: ''\n        }\n    }\n\n\n    componentDidMount() {\n        this.props.blurBackground();\n    }\n\n    componentWillUnmount() {\n        this.props.resetBackground();\n    }\n\n    sendReply = async () => {\n        const { pathname } = this.props.location;\n\n        try {\n            const messageData = {\n                content: this.state.message,\n            }\n            let result;\n            if (this.props.location.pathname.includes('reply-offer')) {\n                messageData.targetId = this.props.match.params.targetId;\n\n                result = await reqPostOfferMessage(this.props.user.email, messageData);\n            } else if (this.props.location.pathname.includes('reply-question')) {\n                messageData.repliedQuestionId = this.props.match.params.targetId;\n                result = await reqReplyQuestion(this.props.user.email, messageData);\n            }\n\n            if (result.status === 200) {\n                this.props.reloadTaskDetail(true);\n                this.props.history.push(deleteLastSubPath(pathname))\n            }\n        } catch (e) {\n            alert('Failed to post question')\n        }\n    }\n\n\n    render() {\n        const { pathname } = this.props.location;\n        return (\n            <div className=\"container\">\n                <div className=\"container--not-blured\">\n                    <div className=\"reply-form\">\n                        <div className=\"form__header\">\n                            <div>\n                                Reply\n                                    <FontAwesomeIcon icon={faWindowClose} className=\"button-close\"\n                                    onClick={() => {\n                                        this.props.history.push(deleteLastSubPath(pathname))\n                                    }} />\n                            </div>\n                        </div>\n\n                        <div className=\"auth-form__content\">\n                            <TextEditor\n                                onChange={(e) => this.setState({ message: e.target.value })}\n                                value={this.state.message}\n                                disableSendButton={true}\n                            />\n                        </div>\n\n                        <div className=\"bottom-buttons\">\n                            <button\n                                onClick={this.sendReply}>\n                                Send\n                        </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}\nexport default connect(state => ({ user: state.user }), { reloadTaskDetail })(\n    BlurBackgroundHoc(withRouter(ReplyForm))\n);\n"]},"metadata":{},"sourceType":"module"}