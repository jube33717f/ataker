{"ast":null,"code":"'use strict';\n/**\n * Module dependencies.\n */\n\nconst URL = require('url').URL;\n\nconst net = require('net');\n\nconst accepts = require('accepts');\n\nconst contentType = require('content-type');\n\nconst stringify = require('url').format;\n\nconst parse = require('parseurl');\n\nconst qs = require('querystring');\n\nconst typeis = require('type-is');\n\nconst fresh = require('fresh');\n\nconst only = require('only');\n\nconst util = require('util');\n\nconst IP = Symbol('context#ip');\n/**\n * Prototype.\n */\n\nmodule.exports = {\n  /**\n   * Return request header.\n   *\n   * @return {Object}\n   * @api public\n   */\n  get header() {\n    return this.req.headers;\n  },\n\n  /**\n   * Set request header.\n   *\n   * @api public\n   */\n  set header(val) {\n    this.req.headers = val;\n  },\n\n  /**\n   * Return request header, alias as request.header\n   *\n   * @return {Object}\n   * @api public\n   */\n  get headers() {\n    return this.req.headers;\n  },\n\n  /**\n   * Set request header, alias as request.header\n   *\n   * @api public\n   */\n  set headers(val) {\n    this.req.headers = val;\n  },\n\n  /**\n   * Get request URL.\n   *\n   * @return {String}\n   * @api public\n   */\n  get url() {\n    return this.req.url;\n  },\n\n  /**\n   * Set request URL.\n   *\n   * @api public\n   */\n  set url(val) {\n    this.req.url = val;\n  },\n\n  /**\n   * Get origin of URL.\n   *\n   * @return {String}\n   * @api public\n   */\n  get origin() {\n    return `${this.protocol}://${this.host}`;\n  },\n\n  /**\n   * Get full request URL.\n   *\n   * @return {String}\n   * @api public\n   */\n  get href() {\n    // support: `GET http://example.com/foo`\n    if (/^https?:\\/\\//i.test(this.originalUrl)) return this.originalUrl;\n    return this.origin + this.originalUrl;\n  },\n\n  /**\n   * Get request method.\n   *\n   * @return {String}\n   * @api public\n   */\n  get method() {\n    return this.req.method;\n  },\n\n  /**\n   * Set request method.\n   *\n   * @param {String} val\n   * @api public\n   */\n  set method(val) {\n    this.req.method = val;\n  },\n\n  /**\n   * Get request pathname.\n   *\n   * @return {String}\n   * @api public\n   */\n  get path() {\n    return parse(this.req).pathname;\n  },\n\n  /**\n   * Set pathname, retaining the query-string when present.\n   *\n   * @param {String} path\n   * @api public\n   */\n  set path(path) {\n    const url = parse(this.req);\n    if (url.pathname === path) return;\n    url.pathname = path;\n    url.path = null;\n    this.url = stringify(url);\n  },\n\n  /**\n   * Get parsed query-string.\n   *\n   * @return {Object}\n   * @api public\n   */\n  get query() {\n    const str = this.querystring;\n    const c = this._querycache = this._querycache || {};\n    return c[str] || (c[str] = qs.parse(str));\n  },\n\n  /**\n   * Set query-string as an object.\n   *\n   * @param {Object} obj\n   * @api public\n   */\n  set query(obj) {\n    this.querystring = qs.stringify(obj);\n  },\n\n  /**\n   * Get query string.\n   *\n   * @return {String}\n   * @api public\n   */\n  get querystring() {\n    if (!this.req) return '';\n    return parse(this.req).query || '';\n  },\n\n  /**\n   * Set querystring.\n   *\n   * @param {String} str\n   * @api public\n   */\n  set querystring(str) {\n    const url = parse(this.req);\n    if (url.search === `?${str}`) return;\n    url.search = str;\n    url.path = null;\n    this.url = stringify(url);\n  },\n\n  /**\n   * Get the search string. Same as the querystring\n   * except it includes the leading ?.\n   *\n   * @return {String}\n   * @api public\n   */\n  get search() {\n    if (!this.querystring) return '';\n    return `?${this.querystring}`;\n  },\n\n  /**\n   * Set the search string. Same as\n   * request.querystring= but included for ubiquity.\n   *\n   * @param {String} str\n   * @api public\n   */\n  set search(str) {\n    this.querystring = str;\n  },\n\n  /**\n   * Parse the \"Host\" header field host\n   * and support X-Forwarded-Host when a\n   * proxy is enabled.\n   *\n   * @return {String} hostname:port\n   * @api public\n   */\n  get host() {\n    const proxy = this.app.proxy;\n    let host = proxy && this.get('X-Forwarded-Host');\n\n    if (!host) {\n      if (this.req.httpVersionMajor >= 2) host = this.get(':authority');\n      if (!host) host = this.get('Host');\n    }\n\n    if (!host) return '';\n    return host.split(/\\s*,\\s*/, 1)[0];\n  },\n\n  /**\n   * Parse the \"Host\" header field hostname\n   * and support X-Forwarded-Host when a\n   * proxy is enabled.\n   *\n   * @return {String} hostname\n   * @api public\n   */\n  get hostname() {\n    const host = this.host;\n    if (!host) return '';\n    if ('[' == host[0]) return this.URL.hostname || ''; // IPv6\n\n    return host.split(':', 1)[0];\n  },\n\n  /**\n   * Get WHATWG parsed URL.\n   * Lazily memoized.\n   *\n   * @return {URL|Object}\n   * @api public\n   */\n  get URL() {\n    /* istanbul ignore else */\n    if (!this.memoizedURL) {\n      const originalUrl = this.originalUrl || ''; // avoid undefined in template string\n\n      try {\n        this.memoizedURL = new URL(`${this.origin}${originalUrl}`);\n      } catch (err) {\n        this.memoizedURL = Object.create(null);\n      }\n    }\n\n    return this.memoizedURL;\n  },\n\n  /**\n   * Check if the request is fresh, aka\n   * Last-Modified and/or the ETag\n   * still match.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n  get fresh() {\n    const method = this.method;\n    const s = this.ctx.status; // GET or HEAD for weak freshness validation only\n\n    if ('GET' != method && 'HEAD' != method) return false; // 2xx or 304 as per rfc2616 14.26\n\n    if (s >= 200 && s < 300 || 304 == s) {\n      return fresh(this.header, this.response.header);\n    }\n\n    return false;\n  },\n\n  /**\n   * Check if the request is stale, aka\n   * \"Last-Modified\" and / or the \"ETag\" for the\n   * resource has changed.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n  get stale() {\n    return !this.fresh;\n  },\n\n  /**\n   * Check if the request is idempotent.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n  get idempotent() {\n    const methods = ['GET', 'HEAD', 'PUT', 'DELETE', 'OPTIONS', 'TRACE'];\n    return !!~methods.indexOf(this.method);\n  },\n\n  /**\n   * Return the request socket.\n   *\n   * @return {Connection}\n   * @api public\n   */\n  get socket() {\n    return this.req.socket;\n  },\n\n  /**\n   * Get the charset when present or undefined.\n   *\n   * @return {String}\n   * @api public\n   */\n  get charset() {\n    try {\n      const {\n        parameters\n      } = contentType.parse(this.req);\n      return parameters.charset || '';\n    } catch (e) {\n      return '';\n    }\n  },\n\n  /**\n   * Return parsed Content-Length when present.\n   *\n   * @return {Number}\n   * @api public\n   */\n  get length() {\n    const len = this.get('Content-Length');\n    if (len == '') return;\n    return ~~len;\n  },\n\n  /**\n   * Return the protocol string \"http\" or \"https\"\n   * when requested with TLS. When the proxy setting\n   * is enabled the \"X-Forwarded-Proto\" header\n   * field will be trusted. If you're running behind\n   * a reverse proxy that supplies https for you this\n   * may be enabled.\n   *\n   * @return {String}\n   * @api public\n   */\n  get protocol() {\n    if (this.socket.encrypted) return 'https';\n    if (!this.app.proxy) return 'http';\n    const proto = this.get('X-Forwarded-Proto');\n    return proto ? proto.split(/\\s*,\\s*/, 1)[0] : 'http';\n  },\n\n  /**\n   * Short-hand for:\n   *\n   *    this.protocol == 'https'\n   *\n   * @return {Boolean}\n   * @api public\n   */\n  get secure() {\n    return 'https' == this.protocol;\n  },\n\n  /**\n   * When `app.proxy` is `true`, parse\n   * the \"X-Forwarded-For\" ip address list.\n   *\n   * For example if the value were \"client, proxy1, proxy2\"\n   * you would receive the array `[\"client\", \"proxy1\", \"proxy2\"]`\n   * where \"proxy2\" is the furthest down-stream.\n   *\n   * @return {Array}\n   * @api public\n   */\n  get ips() {\n    const proxy = this.app.proxy;\n    const val = this.get(this.app.proxyIpHeader);\n    let ips = proxy && val ? val.split(/\\s*,\\s*/) : [];\n\n    if (this.app.maxIpsCount > 0) {\n      ips = ips.slice(-this.app.maxIpsCount);\n    }\n\n    return ips;\n  },\n\n  /**\n   * Return request's remote address\n   * When `app.proxy` is `true`, parse\n   * the \"X-Forwarded-For\" ip address list and return the first one\n   *\n   * @return {String}\n   * @api public\n   */\n  get ip() {\n    if (!this[IP]) {\n      this[IP] = this.ips[0] || this.socket.remoteAddress || '';\n    }\n\n    return this[IP];\n  },\n\n  set ip(_ip) {\n    this[IP] = _ip;\n  },\n\n  /**\n   * Return subdomains as an array.\n   *\n   * Subdomains are the dot-separated parts of the host before the main domain\n   * of the app. By default, the domain of the app is assumed to be the last two\n   * parts of the host. This can be changed by setting `app.subdomainOffset`.\n   *\n   * For example, if the domain is \"tobi.ferrets.example.com\":\n   * If `app.subdomainOffset` is not set, this.subdomains is\n   * `[\"ferrets\", \"tobi\"]`.\n   * If `app.subdomainOffset` is 3, this.subdomains is `[\"tobi\"]`.\n   *\n   * @return {Array}\n   * @api public\n   */\n  get subdomains() {\n    const offset = this.app.subdomainOffset;\n    const hostname = this.hostname;\n    if (net.isIP(hostname)) return [];\n    return hostname.split('.').reverse().slice(offset);\n  },\n\n  /**\n   * Get accept object.\n   * Lazily memoized.\n   *\n   * @return {Object}\n   * @api private\n   */\n  get accept() {\n    return this._accept || (this._accept = accepts(this.req));\n  },\n\n  /**\n   * Set accept object.\n   *\n   * @param {Object}\n   * @api private\n   */\n  set accept(obj) {\n    this._accept = obj;\n  },\n\n  /**\n   * Check if the given `type(s)` is acceptable, returning\n   * the best match when true, otherwise `false`, in which\n   * case you should respond with 406 \"Not Acceptable\".\n   *\n   * The `type` value may be a single mime type string\n   * such as \"application/json\", the extension name\n   * such as \"json\" or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n   * or array is given the _best_ match, if any is returned.\n   *\n   * Examples:\n   *\n   *     // Accept: text/html\n   *     this.accepts('html');\n   *     // => \"html\"\n   *\n   *     // Accept: text/*, application/json\n   *     this.accepts('html');\n   *     // => \"html\"\n   *     this.accepts('text/html');\n   *     // => \"text/html\"\n   *     this.accepts('json', 'text');\n   *     // => \"json\"\n   *     this.accepts('application/json');\n   *     // => \"application/json\"\n   *\n   *     // Accept: text/*, application/json\n   *     this.accepts('image/png');\n   *     this.accepts('png');\n   *     // => false\n   *\n   *     // Accept: text/*;q=.5, application/json\n   *     this.accepts(['html', 'json']);\n   *     this.accepts('html', 'json');\n   *     // => \"json\"\n   *\n   * @param {String|Array} type(s)...\n   * @return {String|Array|false}\n   * @api public\n   */\n  accepts(...args) {\n    return this.accept.types(...args);\n  },\n\n  /**\n   * Return accepted encodings or best fit based on `encodings`.\n   *\n   * Given `Accept-Encoding: gzip, deflate`\n   * an array sorted by quality is returned:\n   *\n   *     ['gzip', 'deflate']\n   *\n   * @param {String|Array} encoding(s)...\n   * @return {String|Array}\n   * @api public\n   */\n  acceptsEncodings(...args) {\n    return this.accept.encodings(...args);\n  },\n\n  /**\n   * Return accepted charsets or best fit based on `charsets`.\n   *\n   * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`\n   * an array sorted by quality is returned:\n   *\n   *     ['utf-8', 'utf-7', 'iso-8859-1']\n   *\n   * @param {String|Array} charset(s)...\n   * @return {String|Array}\n   * @api public\n   */\n  acceptsCharsets(...args) {\n    return this.accept.charsets(...args);\n  },\n\n  /**\n   * Return accepted languages or best fit based on `langs`.\n   *\n   * Given `Accept-Language: en;q=0.8, es, pt`\n   * an array sorted by quality is returned:\n   *\n   *     ['es', 'pt', 'en']\n   *\n   * @param {String|Array} lang(s)...\n   * @return {Array|String}\n   * @api public\n   */\n  acceptsLanguages(...args) {\n    return this.accept.languages(...args);\n  },\n\n  /**\n   * Check if the incoming request contains the \"Content-Type\"\n   * header field, and it contains any of the give mime `type`s.\n   * If there is no request body, `null` is returned.\n   * If there is no content type, `false` is returned.\n   * Otherwise, it returns the first `type` that matches.\n   *\n   * Examples:\n   *\n   *     // With Content-Type: text/html; charset=utf-8\n   *     this.is('html'); // => 'html'\n   *     this.is('text/html'); // => 'text/html'\n   *     this.is('text/*', 'application/json'); // => 'text/html'\n   *\n   *     // When Content-Type is application/json\n   *     this.is('json', 'urlencoded'); // => 'json'\n   *     this.is('application/json'); // => 'application/json'\n   *     this.is('html', 'application/*'); // => 'application/json'\n   *\n   *     this.is('html'); // => false\n   *\n   * @param {String|String[]} [type]\n   * @param {String[]} [types]\n   * @return {String|false|null}\n   * @api public\n   */\n  is(type, ...types) {\n    return typeis(this.req, type, ...types);\n  },\n\n  /**\n   * Return the request mime type void of\n   * parameters such as \"charset\".\n   *\n   * @return {String}\n   * @api public\n   */\n  get type() {\n    const type = this.get('Content-Type');\n    if (!type) return '';\n    return type.split(';')[0];\n  },\n\n  /**\n   * Return request header.\n   *\n   * The `Referrer` header field is special-cased,\n   * both `Referrer` and `Referer` are interchangeable.\n   *\n   * Examples:\n   *\n   *     this.get('Content-Type');\n   *     // => \"text/plain\"\n   *\n   *     this.get('content-type');\n   *     // => \"text/plain\"\n   *\n   *     this.get('Something');\n   *     // => ''\n   *\n   * @param {String} field\n   * @return {String}\n   * @api public\n   */\n  get(field) {\n    const req = this.req;\n\n    switch (field = field.toLowerCase()) {\n      case 'referer':\n      case 'referrer':\n        return req.headers.referrer || req.headers.referer || '';\n\n      default:\n        return req.headers[field] || '';\n    }\n  },\n\n  /**\n   * Inspect implementation.\n   *\n   * @return {Object}\n   * @api public\n   */\n  inspect() {\n    if (!this.req) return;\n    return this.toJSON();\n  },\n\n  /**\n   * Return JSON representation.\n   *\n   * @return {Object}\n   * @api public\n   */\n  toJSON() {\n    return only(this, ['method', 'url', 'header']);\n  }\n\n};\n/**\n * Custom inspection implementation for newer Node.js versions.\n *\n * @return {Object}\n * @api public\n */\n\n/* istanbul ignore else */\n\nif (util.inspect.custom) {\n  module.exports[util.inspect.custom] = module.exports.inspect;\n}","map":{"version":3,"sources":["/Users/jubi/fullStack/groupProject/0322/xyz.frontend/node_modules/koa/lib/request.js"],"names":["URL","require","net","accepts","contentType","stringify","format","parse","qs","typeis","fresh","only","util","IP","Symbol","module","exports","header","req","headers","val","url","origin","protocol","host","href","test","originalUrl","method","path","pathname","query","str","querystring","c","_querycache","obj","search","proxy","app","get","httpVersionMajor","split","hostname","memoizedURL","err","Object","create","s","ctx","status","response","stale","idempotent","methods","indexOf","socket","charset","parameters","e","length","len","encrypted","proto","secure","ips","proxyIpHeader","maxIpsCount","slice","ip","remoteAddress","_ip","subdomains","offset","subdomainOffset","isIP","reverse","accept","_accept","args","types","acceptsEncodings","encodings","acceptsCharsets","charsets","acceptsLanguages","languages","is","type","field","toLowerCase","referrer","referer","inspect","toJSON","custom"],"mappings":"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","sourcesContent":["\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nconst URL = require('url').URL;\nconst net = require('net');\nconst accepts = require('accepts');\nconst contentType = require('content-type');\nconst stringify = require('url').format;\nconst parse = require('parseurl');\nconst qs = require('querystring');\nconst typeis = require('type-is');\nconst fresh = require('fresh');\nconst only = require('only');\nconst util = require('util');\n\nconst IP = Symbol('context#ip');\n\n/**\n * Prototype.\n */\n\nmodule.exports = {\n\n  /**\n   * Return request header.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  get header() {\n    return this.req.headers;\n  },\n\n  /**\n   * Set request header.\n   *\n   * @api public\n   */\n\n  set header(val) {\n    this.req.headers = val;\n  },\n\n  /**\n   * Return request header, alias as request.header\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  get headers() {\n    return this.req.headers;\n  },\n\n  /**\n   * Set request header, alias as request.header\n   *\n   * @api public\n   */\n\n  set headers(val) {\n    this.req.headers = val;\n  },\n\n  /**\n   * Get request URL.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get url() {\n    return this.req.url;\n  },\n\n  /**\n   * Set request URL.\n   *\n   * @api public\n   */\n\n  set url(val) {\n    this.req.url = val;\n  },\n\n  /**\n   * Get origin of URL.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get origin() {\n    return `${this.protocol}://${this.host}`;\n  },\n\n  /**\n   * Get full request URL.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get href() {\n    // support: `GET http://example.com/foo`\n    if (/^https?:\\/\\//i.test(this.originalUrl)) return this.originalUrl;\n    return this.origin + this.originalUrl;\n  },\n\n  /**\n   * Get request method.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get method() {\n    return this.req.method;\n  },\n\n  /**\n   * Set request method.\n   *\n   * @param {String} val\n   * @api public\n   */\n\n  set method(val) {\n    this.req.method = val;\n  },\n\n  /**\n   * Get request pathname.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get path() {\n    return parse(this.req).pathname;\n  },\n\n  /**\n   * Set pathname, retaining the query-string when present.\n   *\n   * @param {String} path\n   * @api public\n   */\n\n  set path(path) {\n    const url = parse(this.req);\n    if (url.pathname === path) return;\n\n    url.pathname = path;\n    url.path = null;\n\n    this.url = stringify(url);\n  },\n\n  /**\n   * Get parsed query-string.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  get query() {\n    const str = this.querystring;\n    const c = this._querycache = this._querycache || {};\n    return c[str] || (c[str] = qs.parse(str));\n  },\n\n  /**\n   * Set query-string as an object.\n   *\n   * @param {Object} obj\n   * @api public\n   */\n\n  set query(obj) {\n    this.querystring = qs.stringify(obj);\n  },\n\n  /**\n   * Get query string.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get querystring() {\n    if (!this.req) return '';\n    return parse(this.req).query || '';\n  },\n\n  /**\n   * Set querystring.\n   *\n   * @param {String} str\n   * @api public\n   */\n\n  set querystring(str) {\n    const url = parse(this.req);\n    if (url.search === `?${str}`) return;\n\n    url.search = str;\n    url.path = null;\n\n    this.url = stringify(url);\n  },\n\n  /**\n   * Get the search string. Same as the querystring\n   * except it includes the leading ?.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get search() {\n    if (!this.querystring) return '';\n    return `?${this.querystring}`;\n  },\n\n  /**\n   * Set the search string. Same as\n   * request.querystring= but included for ubiquity.\n   *\n   * @param {String} str\n   * @api public\n   */\n\n  set search(str) {\n    this.querystring = str;\n  },\n\n  /**\n   * Parse the \"Host\" header field host\n   * and support X-Forwarded-Host when a\n   * proxy is enabled.\n   *\n   * @return {String} hostname:port\n   * @api public\n   */\n\n  get host() {\n    const proxy = this.app.proxy;\n    let host = proxy && this.get('X-Forwarded-Host');\n    if (!host) {\n      if (this.req.httpVersionMajor >= 2) host = this.get(':authority');\n      if (!host) host = this.get('Host');\n    }\n    if (!host) return '';\n    return host.split(/\\s*,\\s*/, 1)[0];\n  },\n\n  /**\n   * Parse the \"Host\" header field hostname\n   * and support X-Forwarded-Host when a\n   * proxy is enabled.\n   *\n   * @return {String} hostname\n   * @api public\n   */\n\n  get hostname() {\n    const host = this.host;\n    if (!host) return '';\n    if ('[' == host[0]) return this.URL.hostname || ''; // IPv6\n    return host.split(':', 1)[0];\n  },\n\n  /**\n   * Get WHATWG parsed URL.\n   * Lazily memoized.\n   *\n   * @return {URL|Object}\n   * @api public\n   */\n\n  get URL() {\n    /* istanbul ignore else */\n    if (!this.memoizedURL) {\n      const originalUrl = this.originalUrl || ''; // avoid undefined in template string\n      try {\n        this.memoizedURL = new URL(`${this.origin}${originalUrl}`);\n      } catch (err) {\n        this.memoizedURL = Object.create(null);\n      }\n    }\n    return this.memoizedURL;\n  },\n\n  /**\n   * Check if the request is fresh, aka\n   * Last-Modified and/or the ETag\n   * still match.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  get fresh() {\n    const method = this.method;\n    const s = this.ctx.status;\n\n    // GET or HEAD for weak freshness validation only\n    if ('GET' != method && 'HEAD' != method) return false;\n\n    // 2xx or 304 as per rfc2616 14.26\n    if ((s >= 200 && s < 300) || 304 == s) {\n      return fresh(this.header, this.response.header);\n    }\n\n    return false;\n  },\n\n  /**\n   * Check if the request is stale, aka\n   * \"Last-Modified\" and / or the \"ETag\" for the\n   * resource has changed.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  get stale() {\n    return !this.fresh;\n  },\n\n  /**\n   * Check if the request is idempotent.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  get idempotent() {\n    const methods = ['GET', 'HEAD', 'PUT', 'DELETE', 'OPTIONS', 'TRACE'];\n    return !!~methods.indexOf(this.method);\n  },\n\n  /**\n   * Return the request socket.\n   *\n   * @return {Connection}\n   * @api public\n   */\n\n  get socket() {\n    return this.req.socket;\n  },\n\n  /**\n   * Get the charset when present or undefined.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get charset() {\n    try {\n      const { parameters } = contentType.parse(this.req);\n      return parameters.charset || '';\n    } catch (e) {\n      return '';\n    }\n  },\n\n  /**\n   * Return parsed Content-Length when present.\n   *\n   * @return {Number}\n   * @api public\n   */\n\n  get length() {\n    const len = this.get('Content-Length');\n    if (len == '') return;\n    return ~~len;\n  },\n\n  /**\n   * Return the protocol string \"http\" or \"https\"\n   * when requested with TLS. When the proxy setting\n   * is enabled the \"X-Forwarded-Proto\" header\n   * field will be trusted. If you're running behind\n   * a reverse proxy that supplies https for you this\n   * may be enabled.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get protocol() {\n    if (this.socket.encrypted) return 'https';\n    if (!this.app.proxy) return 'http';\n    const proto = this.get('X-Forwarded-Proto');\n    return proto ? proto.split(/\\s*,\\s*/, 1)[0] : 'http';\n  },\n\n  /**\n   * Short-hand for:\n   *\n   *    this.protocol == 'https'\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  get secure() {\n    return 'https' == this.protocol;\n  },\n\n  /**\n   * When `app.proxy` is `true`, parse\n   * the \"X-Forwarded-For\" ip address list.\n   *\n   * For example if the value were \"client, proxy1, proxy2\"\n   * you would receive the array `[\"client\", \"proxy1\", \"proxy2\"]`\n   * where \"proxy2\" is the furthest down-stream.\n   *\n   * @return {Array}\n   * @api public\n   */\n\n  get ips() {\n    const proxy = this.app.proxy;\n    const val = this.get(this.app.proxyIpHeader);\n    let ips = proxy && val\n      ? val.split(/\\s*,\\s*/)\n      : [];\n    if (this.app.maxIpsCount > 0) {\n      ips = ips.slice(-this.app.maxIpsCount);\n    }\n    return ips;\n  },\n\n  /**\n   * Return request's remote address\n   * When `app.proxy` is `true`, parse\n   * the \"X-Forwarded-For\" ip address list and return the first one\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get ip() {\n    if (!this[IP]) {\n      this[IP] = this.ips[0] || this.socket.remoteAddress || '';\n    }\n    return this[IP];\n  },\n\n  set ip(_ip) {\n    this[IP] = _ip;\n  },\n\n  /**\n   * Return subdomains as an array.\n   *\n   * Subdomains are the dot-separated parts of the host before the main domain\n   * of the app. By default, the domain of the app is assumed to be the last two\n   * parts of the host. This can be changed by setting `app.subdomainOffset`.\n   *\n   * For example, if the domain is \"tobi.ferrets.example.com\":\n   * If `app.subdomainOffset` is not set, this.subdomains is\n   * `[\"ferrets\", \"tobi\"]`.\n   * If `app.subdomainOffset` is 3, this.subdomains is `[\"tobi\"]`.\n   *\n   * @return {Array}\n   * @api public\n   */\n\n  get subdomains() {\n    const offset = this.app.subdomainOffset;\n    const hostname = this.hostname;\n    if (net.isIP(hostname)) return [];\n    return hostname\n      .split('.')\n      .reverse()\n      .slice(offset);\n  },\n\n  /**\n   * Get accept object.\n   * Lazily memoized.\n   *\n   * @return {Object}\n   * @api private\n   */\n  get accept() {\n    return this._accept || (this._accept = accepts(this.req));\n  },\n\n  /**\n   * Set accept object.\n   *\n   * @param {Object}\n   * @api private\n   */\n  set accept(obj) {\n    this._accept = obj;\n  },\n\n  /**\n   * Check if the given `type(s)` is acceptable, returning\n   * the best match when true, otherwise `false`, in which\n   * case you should respond with 406 \"Not Acceptable\".\n   *\n   * The `type` value may be a single mime type string\n   * such as \"application/json\", the extension name\n   * such as \"json\" or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n   * or array is given the _best_ match, if any is returned.\n   *\n   * Examples:\n   *\n   *     // Accept: text/html\n   *     this.accepts('html');\n   *     // => \"html\"\n   *\n   *     // Accept: text/*, application/json\n   *     this.accepts('html');\n   *     // => \"html\"\n   *     this.accepts('text/html');\n   *     // => \"text/html\"\n   *     this.accepts('json', 'text');\n   *     // => \"json\"\n   *     this.accepts('application/json');\n   *     // => \"application/json\"\n   *\n   *     // Accept: text/*, application/json\n   *     this.accepts('image/png');\n   *     this.accepts('png');\n   *     // => false\n   *\n   *     // Accept: text/*;q=.5, application/json\n   *     this.accepts(['html', 'json']);\n   *     this.accepts('html', 'json');\n   *     // => \"json\"\n   *\n   * @param {String|Array} type(s)...\n   * @return {String|Array|false}\n   * @api public\n   */\n\n  accepts(...args) {\n    return this.accept.types(...args);\n  },\n\n  /**\n   * Return accepted encodings or best fit based on `encodings`.\n   *\n   * Given `Accept-Encoding: gzip, deflate`\n   * an array sorted by quality is returned:\n   *\n   *     ['gzip', 'deflate']\n   *\n   * @param {String|Array} encoding(s)...\n   * @return {String|Array}\n   * @api public\n   */\n\n  acceptsEncodings(...args) {\n    return this.accept.encodings(...args);\n  },\n\n  /**\n   * Return accepted charsets or best fit based on `charsets`.\n   *\n   * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`\n   * an array sorted by quality is returned:\n   *\n   *     ['utf-8', 'utf-7', 'iso-8859-1']\n   *\n   * @param {String|Array} charset(s)...\n   * @return {String|Array}\n   * @api public\n   */\n\n  acceptsCharsets(...args) {\n    return this.accept.charsets(...args);\n  },\n\n  /**\n   * Return accepted languages or best fit based on `langs`.\n   *\n   * Given `Accept-Language: en;q=0.8, es, pt`\n   * an array sorted by quality is returned:\n   *\n   *     ['es', 'pt', 'en']\n   *\n   * @param {String|Array} lang(s)...\n   * @return {Array|String}\n   * @api public\n   */\n\n  acceptsLanguages(...args) {\n    return this.accept.languages(...args);\n  },\n\n  /**\n   * Check if the incoming request contains the \"Content-Type\"\n   * header field, and it contains any of the give mime `type`s.\n   * If there is no request body, `null` is returned.\n   * If there is no content type, `false` is returned.\n   * Otherwise, it returns the first `type` that matches.\n   *\n   * Examples:\n   *\n   *     // With Content-Type: text/html; charset=utf-8\n   *     this.is('html'); // => 'html'\n   *     this.is('text/html'); // => 'text/html'\n   *     this.is('text/*', 'application/json'); // => 'text/html'\n   *\n   *     // When Content-Type is application/json\n   *     this.is('json', 'urlencoded'); // => 'json'\n   *     this.is('application/json'); // => 'application/json'\n   *     this.is('html', 'application/*'); // => 'application/json'\n   *\n   *     this.is('html'); // => false\n   *\n   * @param {String|String[]} [type]\n   * @param {String[]} [types]\n   * @return {String|false|null}\n   * @api public\n   */\n\n  is(type, ...types) {\n    return typeis(this.req, type, ...types);\n  },\n\n  /**\n   * Return the request mime type void of\n   * parameters such as \"charset\".\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get type() {\n    const type = this.get('Content-Type');\n    if (!type) return '';\n    return type.split(';')[0];\n  },\n\n  /**\n   * Return request header.\n   *\n   * The `Referrer` header field is special-cased,\n   * both `Referrer` and `Referer` are interchangeable.\n   *\n   * Examples:\n   *\n   *     this.get('Content-Type');\n   *     // => \"text/plain\"\n   *\n   *     this.get('content-type');\n   *     // => \"text/plain\"\n   *\n   *     this.get('Something');\n   *     // => ''\n   *\n   * @param {String} field\n   * @return {String}\n   * @api public\n   */\n\n  get(field) {\n    const req = this.req;\n    switch (field = field.toLowerCase()) {\n      case 'referer':\n      case 'referrer':\n        return req.headers.referrer || req.headers.referer || '';\n      default:\n        return req.headers[field] || '';\n    }\n  },\n\n  /**\n   * Inspect implementation.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  inspect() {\n    if (!this.req) return;\n    return this.toJSON();\n  },\n\n  /**\n   * Return JSON representation.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  toJSON() {\n    return only(this, [\n      'method',\n      'url',\n      'header'\n    ]);\n  }\n};\n\n/**\n * Custom inspection implementation for newer Node.js versions.\n *\n * @return {Object}\n * @api public\n */\n\n/* istanbul ignore else */\nif (util.inspect.custom) {\n  module.exports[util.inspect.custom] = module.exports.inspect;\n}\n"]},"metadata":{},"sourceType":"script"}