{"ast":null,"code":"var _jsxFileName = \"/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/post-task/subpages/taskLocationAndTime/taskLocationAndTime.js\";\nimport React, { Component } from \"react\";\nimport { faMapMarkerAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { faDesktop } from \"@fortawesome/free-solid-svg-icons\";\nimport InputComponent from \"../../../../hoc/inputComponent\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport ValidationHoc from \"../../../../hoc/validationHoc\";\nimport { connect } from \"react-redux\";\nimport { addTask, setValidationHocCheck } from \"../../../../redux/actions\";\nimport { withRouter } from \"react-router-dom\";\nimport { GoogleApiWrapper } from 'google-maps-react';\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete'; // import InputAuto from \"../../../browse-tasks/task-menu/auto-complete\"\n// TODO @SONIA\n\nclass TaskLocationAndTime extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    if (JSON.stringify(prevProps) !== JSON.stringify(this.props)) {\n      this.props.addTask(this.props.values);\n    }\n  }\n\n  async componentDidMount() {\n    const {\n      taskLocation,\n      taskDuedate\n    } = this.props.postTask.taskData;\n    this.props.setHocData({\n      taskLocation,\n      taskDuedate\n    });\n    this.props.setValidationHocCheck(this.props.okToSubmit); // 如果是post a similar task，需要提前加载好数据\n\n    const taskId = this.props.match.params.id;\n\n    if (taskId && !this.props.postTask.taskData.taskLocation && this.props.taskDetail.taskData) {\n      const {\n        dueDate,\n        place\n      } = this.props.taskDetail.taskData.taskDetail;\n      const taskData = {\n        taskLocation: place,\n        taskDuedate: dueDate\n      };\n      this.props.setHocData(taskData);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: `form__content ${this.props.pageMovementDirection}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form__content--item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"taskLocation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Where do you need it done?\"), React.createElement(\"div\", {\n      className: \"tab-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tab-option\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tab-option--header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(InputComponent, Object.assign({}, this.props, {\n      name: \"taskLocation\",\n      inputClassName: \"input-option\",\n      errorClassName: \"input-option--hide\",\n      value: \"\",\n      type: \"radio\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: this.props.values.taskLocation !== \"online\" ? \"input-option--dot\" : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), \"In person\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Select this if you need the Tasker physically there.\"), React.createElement(FontAwesomeIcon, {\n      icon: faMapMarkerAlt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"tab-option\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tab-option--header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(InputComponent, Object.assign({}, this.props, {\n      name: \"taskLocation\",\n      value: \"online\",\n      type: \"radio\",\n      inputClassName: \"input-option\",\n      errorClassName: \"input-option--hide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: this.props.values.taskLocation === \"online\" ? \"input-option--dot\" : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), \"Online\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Select this if the Tasker can do it from home.\"), React.createElement(FontAwesomeIcon, {\n      icon: faDesktop,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }))), this.props.values.taskLocation !== \"online\" && // @JUBI\n    React.createElement(GooglePlacesAutocomplete, {\n      placeholder: \"Enter a surburb\",\n      onSelect: e => {\n        console.log(e);\n        const google = this.props.google;\n        const maps = google.maps;\n        let geocoder = new maps.Geocoder();\n\n        if (e.place_id != '') {\n          geocoder.geocode({\n            'placeId': e.place_id\n          }, function (results, status) {\n            if (status === 'OK') {\n              console.log(results[0].geometry.location);\n              debugger;\n              this.props.setHocData({\n                taskLocation: e.description,\n                taskLocationCoordinate: results[0].geometry.location\n              }); //changeLocation({locations:results[0].geometry.location});\n              //results[0].geometry.location=>redux\n            }\n          });\n        } // this.setState({place:e.place_id});\n\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }) // <InputComponent {...this.props} name=\"taskLocation\" inputClassName=\"input-area\" />\n    ), React.createElement(\"div\", {\n      className: \"form__content--item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(InputComponent, Object.assign({}, this.props, {\n      title: \"When do you need it done?\",\n      name: \"taskDuedate\",\n      type: \"date\",\n      inputClassName: \"input-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nGoogleApiWrapper({\n  apiKey: 'AIzaSyDy7fG8VcN_upR7UZ7lC63h7cVbVwYu558',\n  libraries: [\"places\", 'geocoding']\n})(TaskLocationAndTime);\nexport default connect(state => ({\n  postTask: state.postTask,\n  taskDetail: state.taskDetail\n}), {\n  addTask,\n  setValidationHocCheck\n})(ValidationHoc(withRouter(TaskLocationAndTime), [\"taskLocation\", \"taskDuedate\"]));","map":{"version":3,"sources":["/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/post-task/subpages/taskLocationAndTime/taskLocationAndTime.js"],"names":["React","Component","faMapMarkerAlt","faDesktop","InputComponent","FontAwesomeIcon","ValidationHoc","connect","addTask","setValidationHocCheck","withRouter","GoogleApiWrapper","GooglePlacesAutocomplete","TaskLocationAndTime","constructor","props","componentDidUpdate","prevProps","prevState","JSON","stringify","values","componentDidMount","taskLocation","taskDuedate","postTask","taskData","setHocData","okToSubmit","taskId","match","params","id","taskDetail","dueDate","place","render","pageMovementDirection","e","console","log","google","maps","geocoder","Geocoder","place_id","geocode","results","status","geometry","location","description","taskLocationCoordinate","apiKey","libraries","state"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { faMapMarkerAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { faDesktop } from \"@fortawesome/free-solid-svg-icons\";\nimport InputComponent from \"../../../../hoc/inputComponent\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport ValidationHoc from \"../../../../hoc/validationHoc\";\nimport { connect } from \"react-redux\";\nimport { addTask, setValidationHocCheck } from \"../../../../redux/actions\"\nimport { withRouter } from \"react-router-dom\";\nimport { GoogleApiWrapper ,} from 'google-maps-react';\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\n// import InputAuto from \"../../../browse-tasks/task-menu/auto-complete\"\n// TODO @SONIA\nclass TaskLocationAndTime extends Component {\n    constructor(props) {\n        super(props);\n    }\n    async componentDidUpdate(prevProps, prevState) {\n        if (JSON.stringify(prevProps) !== JSON.stringify(this.props)) {\n            this.props.addTask(this.props.values)\n        }\n    }\n\n    async componentDidMount() {\n        const { taskLocation, taskDuedate } = this.props.postTask.taskData;\n        this.props.setHocData({ taskLocation, taskDuedate })\n        this.props.setValidationHocCheck(this.props.okToSubmit);\n\n        // 如果是post a similar task，需要提前加载好数据\n        const taskId = this.props.match.params.id\n        if (taskId && !this.props.postTask.taskData.taskLocation && this.props.taskDetail.taskData) {\n            const { dueDate, place } = this.props.taskDetail.taskData.taskDetail;\n            const taskData = { taskLocation: place, taskDuedate: dueDate };\n            this.props.setHocData(taskData);\n        }\n    }\n\n    render() {\n        return (\n            <div className={`form__content ${this.props.pageMovementDirection}`}>\n                <div className=\"form__content--item\">\n\n                    <label htmlFor=\"taskLocation\">Where do you need it done?</label>\n\n                    <div className=\"tab-container\">\n\n                        <div className=\"tab-option\" >\n\n                            <div className=\"tab-option--header\">\n                                <InputComponent {...this.props} name=\"taskLocation\"\n                                    inputClassName=\"input-option\" errorClassName=\"input-option--hide\"\n                                    value=\"\" type=\"radio\" />\n                                <div className={this.props.values.taskLocation !== \"online\" ? \"input-option--dot\" : ''}></div>\n                                In person\n                            </div>\n                            <p>Select this if you need the Tasker physically there.</p>\n                            <FontAwesomeIcon icon={faMapMarkerAlt} />\n                        </div>\n\n                        <div className=\"tab-option\" >\n                            <div className=\"tab-option--header\">\n                                {/* <InputAuto /> */}\n                                <InputComponent {...this.props}\n                                    name=\"taskLocation\" value=\"online\" type=\"radio\"\n                                    inputClassName=\"input-option\" errorClassName=\"input-option--hide\" />\n                                <div className={this.props.values.taskLocation === \"online\" ? \"input-option--dot\" : ''}></div>\n                                Online\n                            </div>\n                            <p>Select this if the Tasker can do it from home.</p>\n                            <FontAwesomeIcon icon={faDesktop} />\n                        </div>\n\n                    </div>\n\n                    {this.props.values.taskLocation !== \"online\"\n                        &&\n                        // @JUBI\n\n                        <GooglePlacesAutocomplete\n                            placeholder=\"Enter a surburb\"\n                            onSelect={(e) => {\n                                console.log(e)\n                                const google = this.props.google;\n                                const maps = google.maps;\n                                let geocoder=new maps.Geocoder;\n                                if(e.place_id!=''){\n                                    geocoder.geocode({'placeId': e.place_id}, function(results, status) {\n                                        if (status === 'OK') {\n                                            console.log(results[0].geometry.location)\n                                            debugger\n                                            this.props.setHocData({taskLocation: e.description, taskLocationCoordinate: results[0].geometry.location});\n                                            //changeLocation({locations:results[0].geometry.location});\n                                            //results[0].geometry.location=>redux\n                                        }\n                                    })\n                                }\n                                \n                                \n                                // this.setState({place:e.place_id});\n                            }}\n                       />\n                        // <InputComponent {...this.props} name=\"taskLocation\" inputClassName=\"input-area\" />\n\n                    \n\n                    }\n\n                </div>\n\n                <div className=\"form__content--item\">\n                    <InputComponent {...this.props}\n                        title=\"When do you need it done?\" name=\"taskDuedate\" type=\"date\"\n                        inputClassName=\"input-area\" />\n                </div>\n            </div>\n        );\n    }\n}\nGoogleApiWrapper({\n    apiKey: 'AIzaSyDy7fG8VcN_upR7UZ7lC63h7cVbVwYu558',\n    libraries: [\"places\",'geocoding']\n  })(TaskLocationAndTime);\nexport default connect(state => ({ postTask: state.postTask, taskDetail: state.taskDetail }), { addTask, setValidationHocCheck })(\n    ValidationHoc(withRouter(TaskLocationAndTime), [\"taskLocation\", \"taskDuedate\"]))"]},"metadata":{},"sourceType":"module"}