{"ast":null,"code":"var _jsxFileName = \"/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/browse-tasks/browse-tasks-right/map-box/map.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GoogleApiWrapper } from 'google-maps-react'; // import { Map, GoogleApiWrapper, InfoWindow, Marker  } from 'google-maps-react';\n\nconst mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '70%',\n    height: '100%'\n  }\n};\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n      lat,\n      lng\n    } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('???', this.props.locations);\n    console.log(prevProps);\n\n    if (prevProps.zoom !== prevProps.zoom || prevProps.google !== this.props.google) {\n      console.log(this.props.zoom);\n      this.loadMap();\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n\n    if (this.props.locations !== '' && this.props.locations !== prevProps.locations) {\n      this.recenterMap();\n    }\n\n    console.log(this.state.currentLocation);\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (this.props.locations === '') {\n      console.log('1');\n      const current = this.state.currentLocation;\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    } else {\n      console.log('**', this.props.locations);\n      let center = this.props.locations;\n      map.panTo(center);\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.locations !== '') return;\n\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n\n    this.loadMap();\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const {\n        google\n      } = this.props;\n      const maps = google.maps;\n      const mapRef = this.refs.map; // reference to the actual DOM element\n\n      const node = ReactDOM.findDOMNode(mapRef);\n      let zoom = 14;\n\n      if (this.props.zoom != '') {\n        zoom = this.props.zoom;\n      }\n\n      console.log('zoom', zoom); //let  zoom  = this.props.zoomValue;\n\n      const {\n        lat,\n        lng\n      } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: zoom\n      }); // maps.Map() is constructor that instantiates the map\n\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  renderChildren() {\n    const {\n      children\n    } = this.props;\n    if (!children) return;\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: style,\n      ref: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Loading map...\"), this.renderChildren());\n  }\n\n} // export default CurrentLocation;\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDy7fG8VcN_upR7UZ7lC63h7cVbVwYu558'\n})(CurrentLocation);\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: -1.2884,\n    lng: 36.8233\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};","map":{"version":3,"sources":["/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/browse-tasks/browse-tasks-right/map-box/map.js"],"names":["React","ReactDOM","GoogleApiWrapper","mapStyles","map","position","width","height","CurrentLocation","Component","constructor","props","lat","lng","initialCenter","state","currentLocation","componentDidUpdate","prevProps","prevState","console","log","locations","zoom","google","loadMap","recenterMap","maps","current","center","LatLng","panTo","componentDidMount","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","mapRef","refs","node","findDOMNode","mapConfig","Object","assign","Map","renderChildren","children","Children","c","cloneElement","mapCenter","render","style","apiKey","defaultProps","visible"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GoogleApiWrapper} from 'google-maps-react';\n// import { Map, GoogleApiWrapper, InfoWindow, Marker  } from 'google-maps-react';\nconst mapStyles = {\n    map: {\n      position: 'absolute',\n      width: '70%',\n      height: '100%'\n\n    }\n  };\n\nexport class CurrentLocation extends React.Component {\n    constructor(props) {\n      super(props);\n    \n      const { lat, lng } = this.props.initialCenter;\n      this.state = {\n        currentLocation: {\n          lat: lat,\n          lng: lng\n        },\n      \n      };\n    }\n    \n    componentDidUpdate(prevProps, prevState) {\n        console.log('???',this.props.locations);\n        console.log(prevProps,)\n        \n        if(prevProps.zoom!==prevProps.zoom||prevProps.google !== this.props.google){\n            console.log(this.props.zoom)\n            this.loadMap();\n        }     \n        if (prevState.currentLocation !== this.state.currentLocation) {\n            this.recenterMap();\n        \n        }\n        if(this.props.locations!==''&&this.props.locations!==prevProps.locations){\n            this.recenterMap();\n        }\n        console.log(this.state.currentLocation)\n            \n        \n      }\n    recenterMap() {\n        const map = this.map;\n        \n        \n\n        const google = this.props.google;\n        const maps = google.maps;\n        \n        if (this.props.locations==='') {\n            console.log('1')\n            const current = this.state.currentLocation;\n            let center = new maps.LatLng(current.lat, current.lng);\n            map.panTo(center);\n        }else{\n            console.log('**',this.props.locations)\n            let center = this.props.locations\n            map.panTo(center);\n        }\n        \n    }\n    componentDidMount() {\n        if (this.props.locations!=='') return;\n        if (this.props.centerAroundCurrentLocation) {\n          if (navigator && navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(pos => {\n              const coords = pos.coords;\n              this.setState({\n                currentLocation: {\n                  lat: coords.latitude,\n                  lng: coords.longitude\n                }\n              });\n            });\n          }\n        }\n        this.loadMap();\n    }\n    loadMap() {\n        if (this.props && this.props.google) {\n          // checks if google is available\n          const { google } = this.props;\n          const maps = google.maps;\n    \n          const mapRef = this.refs.map;\n    \n          // reference to the actual DOM element\n          const node = ReactDOM.findDOMNode(mapRef);\n          let  zoom  = 14;\n          if(this.props.zoom!=''){\n            zoom  = this.props.zoom;\n          }\n          console.log('zoom',zoom)\n          //let  zoom  = this.props.zoomValue;\n          const { lat, lng } = this.state.currentLocation;\n          const center = new maps.LatLng(lat, lng);\n          const mapConfig = Object.assign(\n            {},\n            {\n              center: center,\n              zoom: zoom\n            }\n          );\n    \n          // maps.Map() is constructor that instantiates the map\n          this.map = new maps.Map(node, mapConfig);\n        }\n     }\n    renderChildren() {\n        const { children } = this.props;\n    \n        if (!children) return;\n    \n        return React.Children.map(children, c => {\n          if (!c) return;\n          return React.cloneElement(c, {\n            map: this.map,\n            google: this.props.google,\n            mapCenter: this.state.currentLocation\n          });\n        });\n      }\n    \n    render() {\n        const style = Object.assign({}, mapStyles.map);\n       return (\n         <div>\n           <div style={style} ref=\"map\">\n             Loading map...\n           </div>\n           {this.renderChildren()}\n         </div>\n       );\n     }\n  }\n// export default CurrentLocation;\nexport default GoogleApiWrapper({\n    apiKey: 'AIzaSyDy7fG8VcN_upR7UZ7lC63h7cVbVwYu558'\n})(CurrentLocation);\n  CurrentLocation.defaultProps = {\n    zoom: 14,\n    initialCenter: {\n    lat: -1.2884,\n    lng: 36.8233\n   },\n  centerAroundCurrentLocation: false,\n  visible: true\n};\n"]},"metadata":{},"sourceType":"module"}