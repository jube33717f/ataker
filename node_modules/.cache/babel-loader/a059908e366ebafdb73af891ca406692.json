{"ast":null,"code":"var _jsxFileName = \"/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/browse-tasks/task-menu/auto-complete.js\";\nimport React, { Component } from \"react\";\nimport Script from 'react-load-script';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport \"./task-menu.scss\";\n\nclass InputAuto extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = address => {\n      this.setState({\n        address\n      });\n    };\n\n    this.handleSelect = address => {\n      geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => console.log('Success', latLng)).catch(error => console.error('Error', error));\n    };\n\n    this.state = {\n      address: ''\n    };\n  }\n\n  handleScriptCreate() {\n    this.setState({\n      scriptLoaded: false\n    });\n  }\n\n  handleScriptError() {\n    this.setState({\n      scriptError: true\n    });\n  }\n\n  handleScriptLoad() {\n    this.setState({\n      scriptLoaded: true\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(Script, {\n      url: \"https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js\",\n      onCreate: this.handleScriptCreate.bind(this),\n      onError: this.handleScriptError.bind(this),\n      onLoad: this.handleScriptLoad.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(PlacesAutocomplete, {\n      value: this.state.address,\n      onChange: this.handleChange,\n      onSelect: this.handleSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, ({\n      getInputProps,\n      suggestions,\n      getSuggestionItemProps,\n      loading\n    }) => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"input\", Object.assign({\n      className: \"location--typehead--search\",\n      placeholder: \"Enter a suburb\"\n    }, getInputProps({\n      placeholder: 'Search Places ...',\n      className: 'location-search-input'\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"autocomplete-dropdown-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, loading && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Loading...\"), suggestions.map(suggestion => {\n      const className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n      const style = suggestion.active ? {\n        backgroundColor: '#fafafa',\n        cursor: 'pointer'\n      } : {\n        backgroundColor: '#ffffff',\n        cursor: 'pointer'\n      };\n      return React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n        className,\n        style\n      }), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, suggestion.description));\n    })))));\n  }\n\n}\n\nexport default InputAuto;","map":{"version":3,"sources":["/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/browse-tasks/task-menu/auto-complete.js"],"names":["React","Component","Script","PlacesAutocomplete","geocodeByAddress","getLatLng","InputAuto","constructor","props","handleChange","address","setState","handleSelect","then","results","latLng","console","log","catch","error","state","handleScriptCreate","scriptLoaded","handleScriptError","scriptError","handleScriptLoad","render","bind","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Script from 'react-load-script'\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\nimport \"./task-menu.scss\";\n\nclass InputAuto extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { address: '' };\n    }\n    handleChange = address => {\n        this.setState({ address });\n    };\n    \n    handleSelect = address => {\n        geocodeByAddress(address)\n          .then(results => getLatLng(results[0]))\n          .then(latLng => console.log('Success', latLng))\n          .catch(error => console.error('Error', error));\n    };\n    handleScriptCreate() {\n        this.setState({ scriptLoaded: false })\n    }\n       \n    handleScriptError() {\n        this.setState({ scriptError: true })\n    }\n       \n    handleScriptLoad() {\n       this.setState({ scriptLoaded: true })\n    }\n    render() {\n        return (\n          <>\n             <Script\n              url=\"https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js\"\n              onCreate={this.handleScriptCreate.bind(this)}\n              onError={this.handleScriptError.bind(this)}\n              onLoad={this.handleScriptLoad.bind(this)}/>\n            <PlacesAutocomplete\n                value={this.state.address}\n                onChange={this.handleChange}\n                onSelect={this.handleSelect}\n            >\n                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                    <div>\n                        <input\n                            className=\"location--typehead--search\"\n                            placeholder=\"Enter a suburb\"\n                            {...getInputProps({\n                                placeholder: 'Search Places ...',\n                                className: 'location-search-input',\n                             })}\n                        />\n                        <div className=\"autocomplete-dropdown-container\">\n                            {loading && <div>Loading...</div>}\n                            {suggestions.map(suggestion => {\n                            const className = suggestion.active\n                             ? 'suggestion-item--active'\n                             : 'suggestion-item';\n                            // inline style for demonstration purpose\n                            const style = suggestion.active\n                            ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                            : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                            return (\n                                <div\n                                    {...getSuggestionItemProps(suggestion, {\n                                    className,\n                                    style,\n                                    })}\n                                >\n                                <span>{suggestion.description}</span>\n                         </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </PlacesAutocomplete>\n          </>\n        )\n    }\n}\nexport default InputAuto;"]},"metadata":{},"sourceType":"module"}