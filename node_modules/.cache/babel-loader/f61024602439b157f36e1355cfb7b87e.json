{"ast":null,"code":"import { ajax } from \"./ajax\";\nimport { taskTable, userTable, offerTable } from \"../fakeData\";\nconst BASE = \"http://localhost:5000\"; // TODO @SONIA\n\nexport const reqLogin = (username, password) => {\n  // return ajax(`${BASE}/login`, { username, password }, \"POST\");\n  return new Promise((resolve, reject) => {\n    if (Math.random() < 1) {\n      resolve({\n        status: 0\n      });\n    } else {\n      reject(\"Wrong email or password. Failed to login!\");\n    }\n  });\n};\nexport const reqSignUp = userInfo => {\n  // return ajax(`${BASE}/signup`, userInfo, \"POST\");\n  return new Promise((resolve, reject) => {\n    if (Math.random() < 1) {\n      resolve({\n        status: 0\n      });\n    } else {\n      reject(\"Invalid email or password. Failed to sign up!\");\n    }\n  });\n};\nexport const reqTaskList = (pageNum, pageSize) => {\n  // return ajax(BASE + \"/tasks/list\", { pageNum, pageSize });\n  //模拟后台数据库对多张表查询后返回的数据\n  const mockedData = taskTable.data.map(task => {\n    return { ...task,\n      offers: task.offers ? `${task.offers.length} offer${task.offers.length > 1 ? 's' : ''}` : `0 offer`,\n      //注意这里task offer可能是null\n      photo: userTable.data.find(obj => obj.id === task.posterId).photo\n    };\n  });\n  return Promise.resolve({\n    status: 0,\n    data: mockedData\n  });\n};\nexport const reqTaskDetail = taskId => {\n  // return ajax(BASE + \"/tasks/list\", { pageNum, pageSize });\n  //模拟后台数据库对多张表查询后返回的数据\n  const taskData = taskTable.data[parseInt(taskId)];\n  let offers = [];\n\n  if (taskData.offers) {\n    offers = taskData.offers.map(offerId => offerTable.data.find(obj => obj.id === offerId));\n  }\n\n  offers = offers.map(offer => ({ ...offer,\n    ...userTable.data.find(obj => obj.id === offer.taskerId),\n    messages: offer.messages.map(message => ({ ...message,\n      ...userTable.data.find(obj => obj.id === message.senderId)\n    }))\n  }));\n  const mockedData = { ...taskTable.data[parseInt(taskId)],\n    posterName: userTable.data.find(obj => obj.id === taskData.posterId).username,\n    posterEmail: userTable.data.find(obj => obj.id === taskData.posterId).email,\n    // taskerEmail: taskData.offers ? taskData.offers[0].email : '',//userTable.data.find(obj => obj.id === taskData.offers[0].posterId).email : '',\n    offers: offers,\n    photo: userTable.data.find(obj => obj.id === taskData.posterId).photo,\n    questions: taskData.questions.map(question => ({ ...question,\n      ...userTable.data.find(obj => obj.id === question.senderId),\n      replies: question.replies.map(reply => ({ ...reply,\n        ...userTable.data.find(obj => obj.id === reply.senderId)\n      }))\n    }))\n  };\n  return Promise.resolve({\n    status: 0,\n    data: mockedData\n  });\n};\nexport const reqUserInfo = userEmail => {\n  // return ajax(BASE + \"/tasks/list\", { pageNum, pageSize });\n  //模拟后台数据库对多张表查询后返回的数据\n  const mockedData = userTable.data.find(obj => {\n    return obj.email === userEmail;\n  });\n  return Promise.resolve({\n    status: Number(mockedData === undefined),\n    data: mockedData\n  });\n};\nexport const reqUpdateUser = (userEmail, userData) => {\n  //  ajax(BASE + '/user/update', {userEmail, userData }, 'POST')\n  return Promise.resolve({\n    status: 0,\n    data: userData\n  });\n};\nexport const reqUploadFiles = (userEmail, formData) => {\n  //  ajax(BASE + '/user/uploadPhoto', {userEmail, formData }, 'POST', true)\n  // return Promise.resolve({ status: 0, data: formData });\n  return Promise.resolve({\n    status: 0,\n    data: \"/logo192.png\"\n  });\n};\nexport const reqUpdateTask = (taskId, updatedData) => {\n  const taskData = taskTable.data.find(task => task.id === taskId);\n  const mockedData = { ...taskData,\n    ...updatedData\n  };\n  return Promise.resolve({\n    status: 0,\n    data: mockedData\n  });\n};","map":{"version":3,"sources":["/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/api/api.js"],"names":["ajax","taskTable","userTable","offerTable","BASE","reqLogin","username","password","Promise","resolve","reject","Math","random","status","reqSignUp","userInfo","reqTaskList","pageNum","pageSize","mockedData","data","map","task","offers","length","photo","find","obj","id","posterId","reqTaskDetail","taskId","taskData","parseInt","offerId","offer","taskerId","messages","message","senderId","posterName","posterEmail","email","questions","question","replies","reply","reqUserInfo","userEmail","Number","undefined","reqUpdateUser","userData","reqUploadFiles","formData","reqUpdateTask","updatedData"],"mappings":"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","sourcesContent":["import { ajax } from \"./ajax\";\nimport { taskTable, userTable, offerTable } from \"../fakeData\";\n\nconst BASE = \"http://localhost:5000\";\n\n// TODO @SONIA\n\nexport const reqLogin = (username, password) => {\n  // return ajax(`${BASE}/login`, { username, password }, \"POST\");\n  return new Promise((resolve, reject) => {\n    if (Math.random() < 1) {\n      resolve({ status: 0 });\n    } else {\n      reject(\"Wrong email or password. Failed to login!\");\n    }\n  });\n};\n\nexport const reqSignUp = userInfo => {\n  // return ajax(`${BASE}/signup`, userInfo, \"POST\");\n  return new Promise((resolve, reject) => {\n    if (Math.random() < 1) {\n      resolve({ status: 0 });\n    } else {\n      reject(\"Invalid email or password. Failed to sign up!\");\n    }\n  });\n};\n\nexport const reqTaskList = (pageNum, pageSize) => {\n  // return ajax(BASE + \"/tasks/list\", { pageNum, pageSize });\n\n  //模拟后台数据库对多张表查询后返回的数据\n  const mockedData = taskTable.data.map(task => {\n    return {\n      ...task,\n      offers: task.offers ? `${task.offers.length} offer${task.offers.length > 1 ? 's' : ''}` : `0 offer`, //注意这里task offer可能是null\n      photo: userTable.data.find(obj => obj.id === task.posterId).photo\n    };\n  });\n\n  return Promise.resolve({ status: 0, data: mockedData });\n};\n\n\nexport const reqTaskDetail = taskId => {\n  // return ajax(BASE + \"/tasks/list\", { pageNum, pageSize });\n\n  //模拟后台数据库对多张表查询后返回的数据\n  const taskData = taskTable.data[parseInt(taskId)];\n  let offers = [];\n  if (taskData.offers) {\n    offers = taskData.offers.map(offerId =>\n      offerTable.data.find(obj => obj.id === offerId)\n    );\n  }\n  offers = offers.map(offer => ({\n    ...offer,\n    ...userTable.data.find(obj => obj.id === offer.taskerId),\n    messages: offer.messages.map(message => ({\n      ...message,\n      ...userTable.data.find(obj => obj.id === message.senderId)\n\n    }))\n  }));\n  const mockedData = {\n    ...taskTable.data[parseInt(taskId)],\n    posterName: userTable.data.find(obj => obj.id === taskData.posterId)\n      .username,\n    posterEmail: userTable.data.find(obj => obj.id === taskData.posterId)\n      .email,\n    // taskerEmail: taskData.offers ? taskData.offers[0].email : '',//userTable.data.find(obj => obj.id === taskData.offers[0].posterId).email : '',\n    offers: offers,\n    photo: userTable.data.find(obj => obj.id === taskData.posterId).photo,\n    questions: taskData.questions.map(question => ({\n      ...question,\n      ...userTable.data.find(obj => obj.id === question.senderId),\n      replies: question.replies.map(reply => ({\n        ...reply,\n        ...userTable.data.find(obj => obj.id === reply.senderId)\n      }))\n    }))\n  };\n  return Promise.resolve({ status: 0, data: mockedData });\n};\n\nexport const reqUserInfo = userEmail => {\n  // return ajax(BASE + \"/tasks/list\", { pageNum, pageSize });\n\n  //模拟后台数据库对多张表查询后返回的数据\n  const mockedData = userTable.data.find(obj => {\n    return obj.email === userEmail;\n  });\n\n  return Promise.resolve({\n    status: Number(mockedData === undefined),\n    data: mockedData\n  });\n};\n\nexport const reqUpdateUser = (userEmail, userData) => {\n  //  ajax(BASE + '/user/update', {userEmail, userData }, 'POST')\n  return Promise.resolve({ status: 0, data: userData });\n}\n\nexport const reqUploadFiles = (userEmail, formData) => {\n  //  ajax(BASE + '/user/uploadPhoto', {userEmail, formData }, 'POST', true)\n  // return Promise.resolve({ status: 0, data: formData });\n  return Promise.resolve({ status: 0, data: \"/logo192.png\" });\n}\n\nexport const reqUpdateTask = (taskId, updatedData) => {\n  const taskData = taskTable.data.find(task => task.id === taskId);\n  const mockedData = { ...taskData, ...updatedData }\n  return Promise.resolve({ status: 0, data: mockedData });\n\n}"]},"metadata":{},"sourceType":"module"}