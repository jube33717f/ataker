{"ast":null,"code":"var _jsxFileName = \"/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/browse-tasks/task-menu/auto-complete.js\";\nimport React, { useRef } from 'react';\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete';\nimport useOnclickOutside from 'react-cool-onclickoutside';\n\nconst InputAuto = () => {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      radius: 3\n    },\n    debounce: 300\n  });\n  const ref = useRef();\n  useOnclickOutside(ref, () => {\n    // When user clicks outside of the component, we can dismiss\n    // the searched suggestions by calling this method\n    clearSuggestions();\n  });\n\n  const handleInput = e => {\n    // Update the keyword of the input element\n    setValue(e.target.value);\n  };\n\n  const handleSelect = ({\n    description\n  }) => () => {\n    // When user selects a place, we can replace the keyword without request data from API\n    // by setting the second parameter as \"false\"\n    setValue(description, false);\n    clearSuggestions(); // Get latitude and longitude via utility functions\n\n    getGeocode({\n      address: description\n    }).then(results => getLatLng(results[0])).then(({\n      lat,\n      lng\n    }) => {\n      console.log('📍 Coordinates: ', {\n        lat,\n        lng\n      });\n    }).catch(error => {\n      console.log('😱 Error: ', error);\n    });\n  };\n\n  const renderSuggestions = () => data.map(suggestion => {\n    const {\n      id,\n      structured_formatting: {\n        main_text,\n        secondary_text\n      }\n    } = suggestion;\n    return React.createElement(\"li\", {\n      key: id,\n      onClick: handleSelect(suggestion),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, main_text), \" \", React.createElement(\"small\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, secondary_text));\n  });\n\n  return React.createElement(\"div\", {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: value,\n    onChange: handleInput,\n    disabled: !ready,\n    placeholder: \"Where are you going?\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), status === 'OK' && React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, renderSuggestions()));\n};\n\nexport default InputAuto;","map":{"version":3,"sources":["/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/browse-tasks/task-menu/auto-complete.js"],"names":["React","useRef","usePlacesAutocomplete","getGeocode","getLatLng","useOnclickOutside","InputAuto","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","radius","debounce","ref","handleInput","e","target","handleSelect","description","address","then","results","lat","lng","console","log","catch","error","renderSuggestions","map","suggestion","id","structured_formatting","main_text","secondary_text"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAOC,qBAAP,IAAgCC,UAAhC,EAA4CC,SAA5C,QAA6D,yBAA7D;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,WAAW,EAAE;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAHT;AAIJC,IAAAA,QAJI;AAKJC,IAAAA;AALI,MAMFX,qBAAqB,CAAC;AACxBY,IAAAA,cAAc,EAAE;AAAEC,MAAAA,MAAM,EAAC;AAAT,KADQ;AAExBC,IAAAA,QAAQ,EAAE;AAFc,GAAD,CANzB;AAUA,QAAMC,GAAG,GAAGhB,MAAM,EAAlB;AACAI,EAAAA,iBAAiB,CAACY,GAAD,EAAM,MAAM;AAC3B;AACA;AACAJ,IAAAA,gBAAgB;AACjB,GAJgB,CAAjB;;AAMA,QAAMK,WAAW,GAAGC,CAAC,IAAI;AACvB;AACAP,IAAAA,QAAQ,CAACO,CAAC,CAACC,MAAF,CAASZ,KAAV,CAAR;AACD,GAHD;;AAKA,QAAMa,YAAY,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAqB,MAAM;AAC9C;AACA;AACAV,IAAAA,QAAQ,CAACU,WAAD,EAAc,KAAd,CAAR;AACAT,IAAAA,gBAAgB,GAJ8B,CAM9C;;AACAV,IAAAA,UAAU,CAAC;AAAEoB,MAAAA,OAAO,EAAED;AAAX,KAAD,CAAV,CACGE,IADH,CACQC,OAAO,IAAIrB,SAAS,CAACqB,OAAO,CAAC,CAAD,CAAR,CAD5B,EAEGD,IAFH,CAEQ,CAAC;AAAEE,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAAD,KAAkB;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC;AAAEH,QAAAA,GAAF;AAAOC,QAAAA;AAAP,OAAhC;AACD,KAJH,EAIKG,KAJL,CAIWC,KAAK,IAAI;AAChBH,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BE,KAA1B;AACD,KANH;AAOD,GAdD;;AAgBA,QAAMC,iBAAiB,GAAG,MACxBrB,IAAI,CAACsB,GAAL,CAASC,UAAU,IAAI;AACrB,UAAM;AACJC,MAAAA,EADI;AAEJC,MAAAA,qBAAqB,EAAE;AAAEC,QAAAA,SAAF;AAAaC,QAAAA;AAAb;AAFnB,QAGFJ,UAHJ;AAKA,WACE;AACE,MAAA,GAAG,EAAEC,EADP;AAEE,MAAA,OAAO,EAAEd,YAAY,CAACa,UAAD,CAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASG,SAAT,CAJF,OAI+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQC,cAAR,CAJ/B,CADF;AAQD,GAdD,CADF;;AAiBA,SACE;AAAK,IAAA,GAAG,EAAErB,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,KAAK,EAAET,KADT;AAEE,IAAA,QAAQ,EAAEU,WAFZ;AAGE,IAAA,QAAQ,EAAE,CAACX,KAHb;AAIE,IAAA,WAAW,EAAC,sBAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQGG,MAAM,KAAK,IAAX,IAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKsB,iBAAiB,EAAtB,CARtB,CADF;AAYD,CApED;;AAqEA,eAAe1B,SAAf","sourcesContent":["import React, { useRef } from 'react';\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete';\nimport useOnclickOutside from 'react-cool-onclickoutside';\n\nconst InputAuto = () => {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: { radius:3 },\n    debounce: 300\n  });\n  const ref = useRef();\n  useOnclickOutside(ref, () => {\n    // When user clicks outside of the component, we can dismiss\n    // the searched suggestions by calling this method\n    clearSuggestions();\n  });\n\n  const handleInput = e => {\n    // Update the keyword of the input element\n    setValue(e.target.value);\n  };\n\n  const handleSelect = ({ description }) => () => {\n    // When user selects a place, we can replace the keyword without request data from API\n    // by setting the second parameter as \"false\"\n    setValue(description, false);\n    clearSuggestions();\n\n    // Get latitude and longitude via utility functions\n    getGeocode({ address: description })\n      .then(results => getLatLng(results[0]))\n      .then(({ lat, lng }) => {\n        console.log('📍 Coordinates: ', { lat, lng });\n      }).catch(error => {\n        console.log('😱 Error: ', error)\n      });\n  };\n\n  const renderSuggestions = () =>\n    data.map(suggestion => {\n      const {\n        id,\n        structured_formatting: { main_text, secondary_text }\n      } = suggestion;\n\n      return (\n        <li\n          key={id}\n          onClick={handleSelect(suggestion)}\n        >\n          <strong>{main_text}</strong> <small>{secondary_text}</small>\n        </li>\n      );\n    });\n\n  return (\n    <div ref={ref}>\n      <input\n        value={value}\n        onChange={handleInput}\n        disabled={!ready}\n        placeholder=\"Where are you going?\"\n      />\n      {/* We can use the \"status\" to decide whether we should display the dropdown or not */}\n      {status === 'OK' && <ul>{renderSuggestions()}</ul>}\n    </div>\n  );\n};\nexport default InputAuto;"]},"metadata":{},"sourceType":"module"}