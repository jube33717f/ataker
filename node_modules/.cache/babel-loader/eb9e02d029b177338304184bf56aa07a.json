{"ast":null,"code":"// TODO @SONIA\nconst validatorEmail = {\n  func: val => val && val.match(/\\S+@\\S+\\.\\S+/),\n  msg: \"Please type in valid email\"\n};\nconst validatorPwd = {\n  func: val => val && val.length > 6,\n  msg: \"Length of password should be more than 6\"\n};\nconst validatorName = {\n  func: val => val && val.match(/^[a-zA-Z ]+$/),\n  msg: \"Please type in valid name\"\n};\nconst validatorAge = {\n  func: val => val && !isNaN(val) && val > 0 && val < 100,\n  msg: \"Please type in valid age\"\n};\nconst validatorTaskBudget = {\n  func: val => val && !isNaN(val) && val > 5 && val < 9999,\n  msg: \"Please suggest a budget between $5 and $9,999 for your task\"\n};\n\nconst validatorNumOfCharacters = (min, max) => ({\n  func: val => val && val.length > min && val.length < max,\n  msg: `Please enter at least  ${min} characters and a maximum of ${max}`\n});\n\nconst validatorNumOfDigits = numOfDigits => ({\n  func: val => val && val.match(new RegExp(\"^[0-9]{\" + numOfDigits + \"}$\")),\n  msg: `Please enter a valid ${numOfDigits}-digit number`\n});\n\nconst validatorDateOfBirth = {\n  func: val => val && val.match(/(19|20)\\d{2}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])/),\n  //any date between 1900-2099\n  msg: \"Please enter a valid birth date\"\n};\nexport const validators = {\n  email: validatorEmail,\n  password: validatorPwd,\n  age: validatorAge,\n  name: validatorName,\n  taskTitle: validatorNumOfCharacters(10, 50),\n  taskDetail: validatorNumOfCharacters(25, 1500),\n  taskBudget: validatorTaskBudget,\n  accountNumber: validatorNumOfDigits(8),\n  accountBsb: validatorNumOfDigits(6),\n  postCode: validatorNumOfDigits(6),\n  dateOfBirth: validatorDateOfBirth\n};","map":{"version":3,"sources":["/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/hoc/validator.js"],"names":["validatorEmail","func","val","match","msg","validatorPwd","length","validatorName","validatorAge","isNaN","validatorTaskBudget","validatorNumOfCharacters","min","max","validatorNumOfDigits","numOfDigits","RegExp","validatorDateOfBirth","validators","email","password","age","name","taskTitle","taskDetail","taskBudget","accountNumber","accountBsb","postCode","dateOfBirth"],"mappings":"AAAA;AAEA,MAAMA,cAAc,GAAG;AACrBC,EAAAA,IAAI,EAAEC,GAAG,IAAIA,GAAG,IAAIA,GAAG,CAACC,KAAJ,CAAU,cAAV,CADC;AAErBC,EAAAA,GAAG,EAAE;AAFgB,CAAvB;AAIA,MAAMC,YAAY,GAAG;AACnBJ,EAAAA,IAAI,EAAEC,GAAG,IAAIA,GAAG,IAAIA,GAAG,CAACI,MAAJ,GAAa,CADd;AAEnBF,EAAAA,GAAG,EAAE;AAFc,CAArB;AAKA,MAAMG,aAAa,GAAG;AACpBN,EAAAA,IAAI,EAAEC,GAAG,IAAIA,GAAG,IAAIA,GAAG,CAACC,KAAJ,CAAU,cAAV,CADA;AAEpBC,EAAAA,GAAG,EAAE;AAFe,CAAtB;AAKA,MAAMI,YAAY,GAAG;AACnBP,EAAAA,IAAI,EAAEC,GAAG,IAAIA,GAAG,IAAI,CAACO,KAAK,CAACP,GAAD,CAAb,IAAsBA,GAAG,GAAG,CAA5B,IAAiCA,GAAG,GAAG,GADjC;AAEnBE,EAAAA,GAAG,EAAE;AAFc,CAArB;AAKA,MAAMM,mBAAmB,GAAG;AAC1BT,EAAAA,IAAI,EAAEC,GAAG,IAAIA,GAAG,IAAI,CAACO,KAAK,CAACP,GAAD,CAAb,IAAsBA,GAAG,GAAG,CAA5B,IAAiCA,GAAG,GAAG,IAD1B;AAE1BE,EAAAA,GAAG,EAAE;AAFqB,CAA5B;;AAKA,MAAMO,wBAAwB,GAAG,CAACC,GAAD,EAAMC,GAAN,MAAe;AAC9CZ,EAAAA,IAAI,EAAEC,GAAG,IAAIA,GAAG,IAAIA,GAAG,CAACI,MAAJ,GAAaM,GAApB,IAA2BV,GAAG,CAACI,MAAJ,GAAaO,GADP;AAE9CT,EAAAA,GAAG,EAAG,0BAAyBQ,GAAI,gCAA+BC,GAAI;AAFxB,CAAf,CAAjC;;AAKA,MAAMC,oBAAoB,GAAIC,WAAD,KAAkB;AAC7Cd,EAAAA,IAAI,EAAEC,GAAG,IAAIA,GAAG,IAAIA,GAAG,CAACC,KAAJ,CAAU,IAAIa,MAAJ,CAAW,YAAYD,WAAZ,GAA0B,IAArC,CAAV,CADyB;AAE7CX,EAAAA,GAAG,EAAG,wBAAuBW,WAAY;AAFI,CAAlB,CAA7B;;AAKA,MAAME,oBAAoB,GAAG;AAC3BhB,EAAAA,IAAI,EAAEC,GAAG,IAAIA,GAAG,IAAIA,GAAG,CAACC,KAAJ,CAAU,oDAAV,CADO;AACyD;AACpFC,EAAAA,GAAG,EAAE;AAFsB,CAA7B;AAKA,OAAO,MAAMc,UAAU,GAAG;AACxBC,EAAAA,KAAK,EAAEnB,cADiB;AAExBoB,EAAAA,QAAQ,EAAEf,YAFc;AAGxBgB,EAAAA,GAAG,EAAEb,YAHmB;AAIxBc,EAAAA,IAAI,EAAEf,aAJkB;AAKxBgB,EAAAA,SAAS,EAAEZ,wBAAwB,CAAC,EAAD,EAAK,EAAL,CALX;AAMxBa,EAAAA,UAAU,EAAEb,wBAAwB,CAAC,EAAD,EAAK,IAAL,CANZ;AAOxBc,EAAAA,UAAU,EAAEf,mBAPY;AAQxBgB,EAAAA,aAAa,EAAEZ,oBAAoB,CAAC,CAAD,CARX;AASxBa,EAAAA,UAAU,EAAEb,oBAAoB,CAAC,CAAD,CATR;AAUxBc,EAAAA,QAAQ,EAAEd,oBAAoB,CAAC,CAAD,CAVN;AAWxBe,EAAAA,WAAW,EAAEZ;AAXW,CAAnB","sourcesContent":["// TODO @SONIA\n\nconst validatorEmail = {\n  func: val => val && val.match(/\\S+@\\S+\\.\\S+/),\n  msg: \"Please type in valid email\"\n};\nconst validatorPwd = {\n  func: val => val && val.length > 6,\n  msg: \"Length of password should be more than 6\"\n};\n\nconst validatorName = {\n  func: val => val && val.match(/^[a-zA-Z ]+$/),\n  msg: \"Please type in valid name\"\n};\n\nconst validatorAge = {\n  func: val => val && !isNaN(val) && val > 0 && val < 100,\n  msg: \"Please type in valid age\"\n};\n\nconst validatorTaskBudget = {\n  func: val => val && !isNaN(val) && val > 5 && val < 9999,\n  msg: \"Please suggest a budget between $5 and $9,999 for your task\"\n};\n\nconst validatorNumOfCharacters = (min, max) => ({\n  func: val => val && val.length > min && val.length < max,\n  msg: `Please enter at least  ${min} characters and a maximum of ${max}`\n})\n\nconst validatorNumOfDigits = (numOfDigits) => ({\n  func: val => val && val.match(new RegExp(\"^[0-9]{\" + numOfDigits + \"}$\")),\n  msg: `Please enter a valid ${numOfDigits}-digit number`\n})\n\nconst validatorDateOfBirth = {\n  func: val => val && val.match(/(19|20)\\d{2}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])/),//any date between 1900-2099\n  msg: \"Please enter a valid birth date\"\n}\n\nexport const validators = {\n  email: validatorEmail,\n  password: validatorPwd,\n  age: validatorAge,\n  name: validatorName,\n  taskTitle: validatorNumOfCharacters(10, 50),\n  taskDetail: validatorNumOfCharacters(25, 1500),\n  taskBudget: validatorTaskBudget,\n  accountNumber: validatorNumOfDigits(8),\n  accountBsb: validatorNumOfDigits(6),\n  postCode: validatorNumOfDigits(6),\n  dateOfBirth: validatorDateOfBirth,\n\n};\n"]},"metadata":{},"sourceType":"module"}