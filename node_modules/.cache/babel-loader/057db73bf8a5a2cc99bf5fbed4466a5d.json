{"ast":null,"code":"var _jsxFileName = \"/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/auth/login-form.js\";\nimport React, { Component } from \"react\";\nimport ValidationHoc from \"../../hoc/validationHoc\";\nimport BlurBackgroundHoc from \"../../hoc/blurBackgroundHoc\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faWindowClose } from \"@fortawesome/free-solid-svg-icons\";\nimport facebookIcon from \"../../assets/facebook.png\";\nimport googleIcon from \"../../assets/google.png\";\nimport { withRouter, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { login, logoutUser } from \"../../redux/actions\";\nimport InputComponent from \"../../hoc/inputComponent\";\nimport \"./auth.scss\"; // TODO @SONIA\n\nclass LoginForm extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.props.blurBackground();\n  }\n\n  componentWillUnmount() {\n    this.props.resetBackground();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    //这里是由于\bredux-thunk的原因，不知道什么时候异步请求接到结果，所以只能监听props.user。每改变一下email和password，state和props改变，就会重新渲染。\n    if (JSON.stringify(prevProps.user) !== JSON.stringify(this.props.user)) {\n      if (Object.keys(this.props.user).length !== 0) {\n        //不加这一行的话登陆失败也会被当作成功然后跳转页面\n        if (this.props.user.errMsg) {\n          alert(this.props.user.errMsg); //处理两次失败请求\n\n          this.props.logoutUser(); //不加这一行的话第二次失败请求不会触发componentdidupdate\n        } else {\n          const {\n            pathname\n          } = this.props.location;\n\n          if (this.props.match.params[0] === 'home') {\n            this.props.history.push(\"/account/dashboard\");\n          } else {\n            this.props.history.push(pathname.split('/').slice(0, -1).join('/'));\n          }\n        }\n      }\n    }\n  }\n\n  render() {\n    const {\n      pathname\n    } = this.props.history.location;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container--not-blured\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"auth-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form__header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Log in\", React.createElement(FontAwesomeIcon, {\n      icon: faWindowClose,\n      className: \"button-close\",\n      onClick: () => {\n        this.props.history.push(pathname.split('/').slice(0, -1).join('/')); // this.props.history.goBack();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"auth-form__content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(InputComponent, Object.assign({}, this.props, {\n      title: \"Email\",\n      name: \"email\",\n      placeholder: \"Email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })), React.createElement(InputComponent, Object.assign({}, this.props, {\n      title: \"Password\",\n      name: \"password\",\n      placeholder: \"Password\",\n      type: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })), React.createElement(\"a\", {\n      className: \"blue-link\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Forget password?\")), React.createElement(\"div\", {\n      className: \"bottom-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: async () => {\n        if (await this.props.okToSubmit()) {\n          this.props.login(this.props.values); // 如果要像上面分发异步action，而不是异步分发的话，这里只能在render函数里加对user状态的判断，而不能也无法根据redux/actions/reqLogin里异步请求返回的结果进行操作。\n          // this.props.history.push(\"/account/dashboard\");  //这里就push的话不能检测到分发异步action错误的情况\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Log in\")), React.createElement(\"div\", {\n      className: \"seperator-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"or login with\"), React.createElement(\"div\", {\n      className: \"bottom-buttons bottom-buttons--social-media\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: facebookIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), \"Facebook\"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: googleIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), \"Google\")), React.createElement(\"div\", {\n      className: \"auth-form__bottom-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Don't have an account?\", React.createElement(\"button\", {\n      className: \"blue-link\",\n      onClick: () => {\n        this.props.history.push(`${pathname.split('/').slice(0, -1).join('/')}/signup`);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Sign up\")))));\n  }\n\n} //Higher-order component returns a component. render expects React element and not a component as first argument. It should be:\n\n\nexport default connect(state => ({\n  user: state.user\n}), {\n  login,\n  logoutUser\n})(BlurBackgroundHoc(ValidationHoc(withRouter(LoginForm), ['email', 'password'])));\n/* <div>\n         <label htmlFor=\"email\">Email:</label>\n         <input\n           onChange={this.props.onChange}\n           value={this.props.values.email || ''}\n           className={this.props.errors.email && \"input-area--invalid\" }\n           placeholder=\"Email\"\n           name=\"email\"\n           id=\"email\"\n           autoComplete=\"off\"\n         />\n        <div className=\"error-message\">{this.props.errors.email}</div> \n       </div> */","map":{"version":3,"sources":["/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/auth/login-form.js"],"names":["React","Component","ValidationHoc","BlurBackgroundHoc","FontAwesomeIcon","faWindowClose","facebookIcon","googleIcon","withRouter","Redirect","connect","login","logoutUser","InputComponent","LoginForm","constructor","props","componentDidMount","blurBackground","componentWillUnmount","resetBackground","componentDidUpdate","prevProps","prevState","JSON","stringify","user","Object","keys","length","errMsg","alert","pathname","location","match","params","history","push","split","slice","join","render","okToSubmit","values","state"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ValidationHoc from \"../../hoc/validationHoc\";\nimport BlurBackgroundHoc from \"../../hoc/blurBackgroundHoc\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faWindowClose } from \"@fortawesome/free-solid-svg-icons\";\nimport  facebookIcon  from \"../../assets/facebook.png\";\nimport googleIcon  from \"../../assets/google.png\";\nimport { withRouter, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { login, logoutUser } from \"../../redux/actions\";\nimport InputComponent from \"../../hoc/inputComponent\";\nimport \"./auth.scss\";\n// TODO @SONIA\n\nclass LoginForm extends Component {\n  constructor(props) {\n    super(props);\n\n  }\n  componentDidMount() {\n    this.props.blurBackground();\n  }\n\n  componentWillUnmount() {\n    this.props.resetBackground();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n\n    //这里是由于\bredux-thunk的原因，不知道什么时候异步请求接到结果，所以只能监听props.user。每改变一下email和password，state和props改变，就会重新渲染。\n\n    if (JSON.stringify(prevProps.user) !== JSON.stringify(this.props.user)) {\n      if (Object.keys(this.props.user).length !== 0) {//不加这一行的话登陆失败也会被当作成功然后跳转页面\n        if (this.props.user.errMsg) {\n          alert(this.props.user.errMsg);\n          //处理两次失败请求\n          this.props.logoutUser(); //不加这一行的话第二次失败请求不会触发componentdidupdate\n        } else {\n          const {pathname} = this.props.location;\n          if (this.props.match.params[0] === 'home') {\n            this.props.history.push(\"/account/dashboard\");\n          } else {\n            this.props.history.push(pathname.split('/').slice(0, -1).join('/'));\n          }\n        }\n      }\n    }\n  }\n\n  render() {\n    const {pathname} = this.props.history.location;\n    return (\n      <div className=\"container\">\n        <div className=\"container--not-blured\">\n          <div className=\"auth-form\">\n            <div className=\"form__header\">\n              <div>\n                Log in\n                <FontAwesomeIcon icon={faWindowClose} className=\"button-close\" onClick={() => { \n                  this.props.history.push(pathname.split('/').slice(0, -1).join('/'))\n                  // this.props.history.goBack();\n                   }} />\n              </div>\n            </div>\n\n\n            <div className=\"auth-form__content\">\n              \n                <InputComponent {...this.props} title=\"Email\" name=\"email\" placeholder=\"Email\"/>\n                <InputComponent {...this.props} title=\"Password\" name=\"password\" placeholder=\"Password\" type=\"password\" />\n              <a className=\"blue-link\">Forget password?</a>\n            </div>\n                \n            <div className=\"bottom-buttons\">\n            <button\n              onClick={async () => {\n                if (await this.props.okToSubmit()) {\n                  this.props.login(this.props.values);\n                  // 如果要像上面分发异步action，而不是异步分发的话，这里只能在render函数里加对user状态的判断，而不能也无法根据redux/actions/reqLogin里异步请求返回的结果进行操作。\n                  // this.props.history.push(\"/account/dashboard\");  //这里就push的话不能检测到分发异步action错误的情况\n                }\n              }}\n            >\n              Log in\n          </button>\n          </div>\n        \n            <div className=\"seperator-wrapper\">or login with</div>\n\n            <div className=\"bottom-buttons bottom-buttons--social-media\">\n              <button><img src={facebookIcon}/>Facebook</button>\n              <button><img src={googleIcon}/>Google</button>\n            </div>\n\n          \n            <div className=\"auth-form__bottom-section\">\n              Don't have an account?\n            \n            <button className=\"blue-link\"\n                onClick={() => {\n                  this.props.history.push(\n                    `${pathname.split('/').slice(0, -1).join('/')}/signup`\n                  );\n                }}\n              >\n                Sign up\n            </button>\n            </div>\n\n          {/* <div>{this.props.errMsg}</div> */}\n            {/* <div>{this.props.user && this.props.user.errMsg }</div> */}\n           \n          </div>\n        </div>\n      </div>\n\n    );\n  }\n}\n\n//Higher-order component returns a component. render expects React element and not a component as first argument. It should be:\nexport default connect(state => ({ user: state.user }), { login, logoutUser })(\n  BlurBackgroundHoc(ValidationHoc(withRouter(LoginForm), ['email', 'password']))\n);\n\n\n\n       /* <div>\n                <label htmlFor=\"email\">Email:</label>\n                <input\n                  onChange={this.props.onChange}\n                  value={this.props.values.email || ''}\n                  className={this.props.errors.email && \"input-area--invalid\" }\n                  placeholder=\"Email\"\n                  name=\"email\"\n                  id=\"email\"\n                  autoComplete=\"off\"\n                />\n               <div className=\"error-message\">{this.props.errors.email}</div> \n              </div> */"]},"metadata":{},"sourceType":"module"}