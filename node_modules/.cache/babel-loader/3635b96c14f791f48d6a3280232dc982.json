{"ast":null,"code":"'use strict';\n\nconst Promise = require('any-promise');\n/**\n * Expose compositor.\n */\n\n\nmodule.exports = compose;\n/**\n * Compose `middleware` returning\n * a fully valid middleware comprised\n * of all those which are passed.\n *\n * @param {Array} middleware\n * @return {Function}\n * @api public\n */\n\nfunction compose(middleware) {\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!');\n\n  for (const fn of middleware) {\n    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!');\n  }\n  /**\n   * @param {Object} context\n   * @return {Promise}\n   * @api public\n   */\n\n\n  return function (context, next) {\n    // last called middleware #\n    let index = -1;\n    return dispatch(0);\n\n    function dispatch(i) {\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'));\n      index = i;\n      let fn = middleware[i];\n      if (i === middleware.length) fn = next;\n      if (!fn) return Promise.resolve();\n\n      try {\n        return Promise.resolve(fn(context, function next() {\n          return dispatch(i + 1);\n        }));\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/Users/jubi/fullStack/groupProject/0322/xyz.frontend/node_modules/koa-convert/node_modules/koa-compose/index.js"],"names":["Promise","require","module","exports","compose","middleware","Array","isArray","TypeError","fn","context","next","index","dispatch","i","reject","Error","length","resolve","err"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAEA;;;;;AAIAC,MAAM,CAACC,OAAP,GAAiBC,OAAjB;AAEA;;;;;;;;;;AAUA,SAASA,OAAT,CAAkBC,UAAlB,EAA8B;AAC5B,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAL,EAAgC,MAAM,IAAIG,SAAJ,CAAc,oCAAd,CAAN;;AAChC,OAAK,MAAMC,EAAX,IAAiBJ,UAAjB,EAA6B;AAC3B,QAAI,OAAOI,EAAP,KAAc,UAAlB,EAA8B,MAAM,IAAID,SAAJ,CAAc,2CAAd,CAAN;AAC/B;AAED;;;;;;;AAMA,SAAO,UAAUE,OAAV,EAAmBC,IAAnB,EAAyB;AAC9B;AACA,QAAIC,KAAK,GAAG,CAAC,CAAb;AACA,WAAOC,QAAQ,CAAC,CAAD,CAAf;;AACA,aAASA,QAAT,CAAmBC,CAAnB,EAAsB;AACpB,UAAIA,CAAC,IAAIF,KAAT,EAAgB,OAAOZ,OAAO,CAACe,MAAR,CAAe,IAAIC,KAAJ,CAAU,8BAAV,CAAf,CAAP;AAChBJ,MAAAA,KAAK,GAAGE,CAAR;AACA,UAAIL,EAAE,GAAGJ,UAAU,CAACS,CAAD,CAAnB;AACA,UAAIA,CAAC,KAAKT,UAAU,CAACY,MAArB,EAA6BR,EAAE,GAAGE,IAAL;AAC7B,UAAI,CAACF,EAAL,EAAS,OAAOT,OAAO,CAACkB,OAAR,EAAP;;AACT,UAAI;AACF,eAAOlB,OAAO,CAACkB,OAAR,CAAgBT,EAAE,CAACC,OAAD,EAAU,SAASC,IAAT,GAAiB;AAClD,iBAAOE,QAAQ,CAACC,CAAC,GAAG,CAAL,CAAf;AACD,SAFwB,CAAlB,CAAP;AAGD,OAJD,CAIE,OAAOK,GAAP,EAAY;AACZ,eAAOnB,OAAO,CAACe,MAAR,CAAeI,GAAf,CAAP;AACD;AACF;AACF,GAlBD;AAmBD","sourcesContent":["'use strict'\n\nconst Promise = require('any-promise')\n\n/**\n * Expose compositor.\n */\n\nmodule.exports = compose\n\n/**\n * Compose `middleware` returning\n * a fully valid middleware comprised\n * of all those which are passed.\n *\n * @param {Array} middleware\n * @return {Function}\n * @api public\n */\n\nfunction compose (middleware) {\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')\n  for (const fn of middleware) {\n    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')\n  }\n\n  /**\n   * @param {Object} context\n   * @return {Promise}\n   * @api public\n   */\n\n  return function (context, next) {\n    // last called middleware #\n    let index = -1\n    return dispatch(0)\n    function dispatch (i) {\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'))\n      index = i\n      let fn = middleware[i]\n      if (i === middleware.length) fn = next\n      if (!fn) return Promise.resolve()\n      try {\n        return Promise.resolve(fn(context, function next () {\n          return dispatch(i + 1)\n        }))\n      } catch (err) {\n        return Promise.reject(err)\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}