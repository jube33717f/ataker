{"ast":null,"code":"/*!\n * keygrip\n * Copyright(c) 2011-2014 Jed Schmidt\n * MIT Licensed\n */\n'use strict';\n\nvar compare = require('tsscmp');\n\nvar crypto = require(\"crypto\");\n\nfunction Keygrip(keys, algorithm, encoding) {\n  if (!algorithm) algorithm = \"sha1\";\n  if (!encoding) encoding = \"base64\";\n  if (!(this instanceof Keygrip)) return new Keygrip(keys, algorithm, encoding);\n\n  if (!keys || !(0 in keys)) {\n    throw new Error(\"Keys must be provided.\");\n  }\n\n  function sign(data, key) {\n    return crypto.createHmac(algorithm, key).update(data).digest(encoding).replace(/\\/|\\+|=/g, function (x) {\n      return {\n        \"/\": \"_\",\n        \"+\": \"-\",\n        \"=\": \"\"\n      }[x];\n    });\n  }\n\n  this.sign = function (data) {\n    return sign(data, keys[0]);\n  };\n\n  this.verify = function (data, digest) {\n    return this.index(data, digest) > -1;\n  };\n\n  this.index = function (data, digest) {\n    for (var i = 0, l = keys.length; i < l; i++) {\n      if (compare(digest, sign(data, keys[i]))) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n}\n\nKeygrip.sign = Keygrip.verify = Keygrip.index = function () {\n  throw new Error(\"Usage: require('keygrip')(<array-of-keys>)\");\n};\n\nmodule.exports = Keygrip;","map":{"version":3,"sources":["/Users/jubi/fullStack/groupProject/0322/xyz.frontend/node_modules/keygrip/index.js"],"names":["compare","require","crypto","Keygrip","keys","algorithm","encoding","Error","sign","data","key","createHmac","update","digest","replace","x","verify","index","i","l","length","module","exports"],"mappings":"AAAA;;;;;AAMA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,QAAD,CAArB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAApB;;AAEA,SAASE,OAAT,CAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,QAAlC,EAA4C;AAC1C,MAAI,CAACD,SAAL,EAAgBA,SAAS,GAAG,MAAZ;AAChB,MAAI,CAACC,QAAL,EAAeA,QAAQ,GAAG,QAAX;AACf,MAAI,EAAE,gBAAgBH,OAAlB,CAAJ,EAAgC,OAAO,IAAIA,OAAJ,CAAYC,IAAZ,EAAkBC,SAAlB,EAA6BC,QAA7B,CAAP;;AAEhC,MAAI,CAACF,IAAD,IAAS,EAAE,KAAKA,IAAP,CAAb,EAA2B;AACzB,UAAM,IAAIG,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,WAASC,IAAT,CAAcC,IAAd,EAAoBC,GAApB,EAAyB;AACvB,WAAOR,MAAM,CACVS,UADI,CACON,SADP,EACkBK,GADlB,EAEJE,MAFI,CAEGH,IAFH,EAESI,MAFT,CAEgBP,QAFhB,EAGJQ,OAHI,CAGI,UAHJ,EAGgB,UAASC,CAAT,EAAY;AAC/B,aAAQ;AAAE,aAAK,GAAP;AAAY,aAAK,GAAjB;AAAsB,aAAK;AAA3B,OAAD,CAAkCA,CAAlC,CAAP;AACD,KALI,CAAP;AAMD;;AAED,OAAKP,IAAL,GAAY,UAASC,IAAT,EAAc;AAAE,WAAOD,IAAI,CAACC,IAAD,EAAOL,IAAI,CAAC,CAAD,CAAX,CAAX;AAA4B,GAAxD;;AAEA,OAAKY,MAAL,GAAc,UAASP,IAAT,EAAeI,MAAf,EAAuB;AACnC,WAAO,KAAKI,KAAL,CAAWR,IAAX,EAAiBI,MAAjB,IAA2B,CAAC,CAAnC;AACD,GAFD;;AAIA,OAAKI,KAAL,GAAa,UAASR,IAAT,EAAeI,MAAf,EAAuB;AAClC,SAAK,IAAIK,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGf,IAAI,CAACgB,MAAzB,EAAiCF,CAAC,GAAGC,CAArC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,UAAIlB,OAAO,CAACa,MAAD,EAASL,IAAI,CAACC,IAAD,EAAOL,IAAI,CAACc,CAAD,CAAX,CAAb,CAAX,EAA0C;AACxC,eAAOA,CAAP;AACD;AACF;;AAED,WAAO,CAAC,CAAR;AACD,GARD;AASD;;AAEDf,OAAO,CAACK,IAAR,GAAeL,OAAO,CAACa,MAAR,GAAiBb,OAAO,CAACc,KAAR,GAAgB,YAAW;AACzD,QAAM,IAAIV,KAAJ,CAAU,4CAAV,CAAN;AACD,CAFD;;AAIAc,MAAM,CAACC,OAAP,GAAiBnB,OAAjB","sourcesContent":["/*!\n * keygrip\n * Copyright(c) 2011-2014 Jed Schmidt\n * MIT Licensed\n */\n\n'use strict'\n\nvar compare = require('tsscmp')\nvar crypto = require(\"crypto\")\n  \nfunction Keygrip(keys, algorithm, encoding) {\n  if (!algorithm) algorithm = \"sha1\";\n  if (!encoding) encoding = \"base64\";\n  if (!(this instanceof Keygrip)) return new Keygrip(keys, algorithm, encoding)\n\n  if (!keys || !(0 in keys)) {\n    throw new Error(\"Keys must be provided.\")\n  }\n\n  function sign(data, key) {\n    return crypto\n      .createHmac(algorithm, key)\n      .update(data).digest(encoding)\n      .replace(/\\/|\\+|=/g, function(x) {\n        return ({ \"/\": \"_\", \"+\": \"-\", \"=\": \"\" })[x]\n      })\n  }\n\n  this.sign = function(data){ return sign(data, keys[0]) }\n\n  this.verify = function(data, digest) {\n    return this.index(data, digest) > -1\n  }\n\n  this.index = function(data, digest) {\n    for (var i = 0, l = keys.length; i < l; i++) {\n      if (compare(digest, sign(data, keys[i]))) {\n        return i\n      }\n    }\n\n    return -1\n  }\n}\n\nKeygrip.sign = Keygrip.verify = Keygrip.index = function() {\n  throw new Error(\"Usage: require('keygrip')(<array-of-keys>)\")\n}\n\nmodule.exports = Keygrip\n"]},"metadata":{},"sourceType":"script"}