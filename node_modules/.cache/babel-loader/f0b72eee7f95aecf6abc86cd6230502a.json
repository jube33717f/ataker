{"ast":null,"code":"var _jsxFileName = \"/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/browse-tasks/browse-tasks-right/task-detail/question-section/question-section.js\";\nimport React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport ToggleTextbox from \"../../../../../components/toggle-textbox/toggle-textbox\";\nimport TextEditor from \"../../../../../components/text-editor/text-editor\";\nimport { get_time_diff } from \"../../../../../utils/time-difference\";\nimport { connect } from \"react-redux\";\nimport { reqPostQuestion } from \"../../../../../api/api\";\nimport { reloadTaskDetail } from \"../../../../../redux/actions\"; // TODO @SONIA\n\nconst {\n  BASE\n} = global.constants;\n\nclass QuestionBoxSection extends React.Component {\n  constructor() {\n    super();\n\n    this.sendQuestion = async () => {\n      try {\n        const messageData = {\n          targetId: this.props.match.params.id,\n          content: this.state.message\n        };\n        const result = await reqPostQuestion(this.props.user.email, messageData);\n\n        if (result.status === 200) {\n          this.props.reloadTaskDetail(true);\n        }\n      } catch (e) {\n        alert('Failed to post question');\n      }\n    };\n\n    this.pushToGeneratedUrl = (pathname, data) => {\n      this.props.history.push(`${this.props.match.url}/${pathname}-question-${data.questionId}`);\n    };\n\n    this.state = {\n      message: ''\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.match.params.id !== this.props.match.params.id) {\n      this.setState({\n        message: ''\n      });\n    }\n  }\n\n  render() {\n    const {\n      pathname\n    } = this.props.location;\n    const userEmail = this.props.user.email;\n    const {\n      questions\n    } = this.props.taskDetail.taskData;\n    const posterName = this.props.taskDetail.taskData.taskDetail && this.props.taskDetail.taskData.taskDetail.posterInfo.username;\n    return React.createElement(\"div\", {\n      className: \"task-detail__question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"splitter-section-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Questions(\", questions && questions.length !== 0 ? questions.length : 0 //  + questions.reduce((accum, current) => accum + current.replies.length,0)\n    , \")\"), React.createElement(\"div\", {\n      className: \"small-title bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Please don't share personal info \\u2013 insurance won't apply to tasks not done through Airtasker!\"), userEmail ? React.createElement(TextEditor, {\n      targetPerson: posterName,\n      onChange: e => this.setState({\n        message: e.target.value\n      }),\n      value: this.state.message,\n      onSubmit: () => {\n        this.sendQuestion();\n        this.setState({\n          message: ''\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      className: \"padder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"To join the conversation\"), React.createElement(Link, {\n      className: \"green-button\",\n      to: `${pathname}/signup`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Sign Up\"), \"or\", React.createElement(Link, {\n      className: \"green-button\",\n      to: `${pathname}/login`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Log In\")), questions && questions.map((question, index) => React.createElement(React.Fragment, null, React.createElement(ToggleTextbox, {\n      message: question,\n      key: index,\n      questionId: question._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), question.replies.map((message, index) => React.createElement(\"div\", {\n      className: \"task-detail__offer--reply\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"avatar-image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: message.senderInfo.photo && `${BASE}/upload/${message.senderInfo.photo.filename}`,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"poster-detail__item--detail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"user-name-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"\",\n      className: \"user-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, message.senderInfo.username)), message.content, React.createElement(\"div\", {\n      className: \"toggle-textbox__message--bottom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, get_time_diff(message.postDate), \" ago\"), userEmail && React.createElement(Link, {\n      onClick: () => this.pushToGeneratedUrl('reply', {\n        questionId: question._id\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Reply\"))))))));\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user,\n  taskDetail: state.taskDetail\n}), {\n  reloadTaskDetail\n})(withRouter(QuestionBoxSection));","map":{"version":3,"sources":["/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/browse-tasks/browse-tasks-right/task-detail/question-section/question-section.js"],"names":["React","Link","withRouter","ToggleTextbox","TextEditor","get_time_diff","connect","reqPostQuestion","reloadTaskDetail","BASE","global","constants","QuestionBoxSection","Component","constructor","sendQuestion","messageData","targetId","props","match","params","id","content","state","message","result","user","email","status","e","alert","pushToGeneratedUrl","pathname","data","history","push","url","questionId","componentDidUpdate","prevProps","prevState","setState","render","location","userEmail","questions","taskDetail","taskData","posterName","posterInfo","username","length","target","value","map","question","index","_id","replies","senderInfo","photo","filename","postDate"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,kBAAjC;AACA,OAAOC,aAAP,MAA0B,yDAA1B;AACA,OAAOC,UAAP,MAAuB,mDAAvB;AACA,SAASC,aAAT,QAA8B,sCAA9B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAgC,wBAAhC;AACA,SAASC,gBAAT,QAAiC,8BAAjC,C,CACA;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAWC,MAAM,CAACC,SAAxB;;AAEA,MAAMC,kBAAN,SAAiCZ,KAAK,CAACa,SAAvC,CAAiD;AAC7CC,EAAAA,WAAW,GAAG;AACV;;AADU,SAadC,YAbc,GAaC,YAAY;AACvB,UAAI;AACA,cAAMC,WAAW,GAAG;AAChBC,UAAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EADlB;AAEhBC,UAAAA,OAAO,EAAE,KAAKC,KAAL,CAAWC;AAFJ,SAApB;AAIA,cAAMC,MAAM,GAAG,MAAMlB,eAAe,CAAC,KAAKW,KAAL,CAAWQ,IAAX,CAAgBC,KAAjB,EAAwBX,WAAxB,CAApC;;AACA,YAAIS,MAAM,CAACG,MAAP,KAAkB,GAAtB,EAA2B;AACvB,eAAKV,KAAL,CAAWV,gBAAX,CAA4B,IAA5B;AACH;AACJ,OATD,CASE,OAAOqB,CAAP,EAAU;AACRC,QAAAA,KAAK,CAAC,yBAAD,CAAL;AACH;AACJ,KA1Ba;;AAAA,SA4BdC,kBA5Bc,GA4BO,CAACC,QAAD,EAAWC,IAAX,KAAoB;AACrC,WAAKf,KAAL,CAAWgB,OAAX,CAAmBC,IAAnB,CAAyB,GAAE,KAAKjB,KAAL,CAAWC,KAAX,CAAiBiB,GAAI,IAAGJ,QAAS,aAAYC,IAAI,CAACI,UAAW,EAAxF;AAEH,KA/Ba;;AAEV,SAAKd,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE;AADA,KAAb;AAGH;;AAEDc,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACrC,QAAID,SAAS,CAACpB,KAAV,CAAgBC,MAAhB,CAAuBC,EAAvB,KAA8B,KAAKH,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA1D,EAA8D;AAC1D,WAAKoB,QAAL,CAAc;AAAEjB,QAAAA,OAAO,EAAE;AAAX,OAAd;AACH;AACJ;;AAuBDkB,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEV,MAAAA;AAAF,QAAe,KAAKd,KAAL,CAAWyB,QAAhC;AACA,UAAMC,SAAS,GAAG,KAAK1B,KAAL,CAAWQ,IAAX,CAAgBC,KAAlC;AACA,UAAM;AAAEkB,MAAAA;AAAF,QAAgB,KAAK3B,KAAL,CAAW4B,UAAX,CAAsBC,QAA5C;AACA,UAAMC,UAAU,GAAG,KAAK9B,KAAL,CAAW4B,UAAX,CAAsBC,QAAtB,CAA+BD,UAA/B,IAA6C,KAAK5B,KAAL,CAAW4B,UAAX,CAAsBC,QAAtB,CAA+BD,UAA/B,CAA0CG,UAA1C,CAAqDC,QAArH;AAEA,WACI;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEQL,SAAS,IAAIA,SAAS,CAACM,MAAV,KAAqB,CAAlC,GAAsCN,SAAS,CAACM,MAAhD,GAAyD,CAFjE,CAEoE;AAFpE,UADJ,EAMI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4GANJ,EAUKP,SAAS,GAEN,oBAAC,UAAD;AACI,MAAA,YAAY,EAAEI,UADlB;AAEI,MAAA,QAAQ,EAAGnB,CAAD,IAAO,KAAKY,QAAL,CAAc;AAAEjB,QAAAA,OAAO,EAAEK,CAAC,CAACuB,MAAF,CAASC;AAApB,OAAd,CAFrB;AAGI,MAAA,KAAK,EAAE,KAAK9B,KAAL,CAAWC,OAHtB;AAII,MAAA,QAAQ,EAAE,MAAM;AAAE,aAAKT,YAAL;AAAqB,aAAK0B,QAAL,CAAc;AAAEjB,UAAAA,OAAO,EAAE;AAAX,SAAd;AAAgC,OAJ3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFM,GASN;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ,EAEI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,cAAhB;AAA+B,MAAA,EAAE,EAAG,GAAEQ,QAAS,SAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFJ,QAMI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,cAAhB;AAA+B,MAAA,EAAE,EAAG,GAAEA,QAAS,QAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,CAnBR,EA+BKa,SAAS,IAAIA,SAAS,CAACS,GAAV,CAAc,CAACC,QAAD,EAAWC,KAAX,KACxB,0CACI,oBAAC,aAAD;AAAe,MAAA,OAAO,EAAED,QAAxB;AAAkC,MAAA,GAAG,EAAEC,KAAvC;AAA8C,MAAA,UAAU,EAAED,QAAQ,CAACE,GAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEKF,QAAQ,CAACG,OAAT,CAAiBJ,GAAjB,CAAqB,CAAC9B,OAAD,EAAUgC,KAAV,KAClB;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,GAAG,EAAEhC,OAAO,CAACmC,UAAR,CAAmBC,KAAnB,IAA6B,GAAEnD,IAAK,WAAUe,OAAO,CAACmC,UAAR,CAAmBC,KAAnB,CAAyBC,QAAS,EAA1F;AAA6F,MAAA,GAAG,EAAC,EAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,EAII;AAAK,MAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,EAAT;AAAY,MAAA,SAAS,EAAC,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKrC,OAAO,CAACmC,UAAR,CAAmBT,QADxB,CADJ,CADJ,EAMK1B,OAAO,CAACF,OANb,EAOI;AAAK,MAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOjB,aAAa,CAACmB,OAAO,CAACsC,QAAT,CAApB,SAAjD,EACKlB,SAAS,IAAI,oBAAC,IAAD;AAAM,MAAA,OAAO,EAAE,MAAM,KAAKb,kBAAL,CAAwB,OAAxB,EAAiC;AAAEM,QAAAA,UAAU,EAAEkB,QAAQ,CAACE;AAAvB,OAAjC,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADlB,CAPJ,CAJJ,CADH,CAFL,CADU,CA/BlB,CADJ;AA0DH;;AAnG4C;;AAqGjD,eAAenD,OAAO,CAACiB,KAAK,KAAK;AAAEG,EAAAA,IAAI,EAAEH,KAAK,CAACG,IAAd;AAAoBoB,EAAAA,UAAU,EAAEvB,KAAK,CAACuB;AAAtC,CAAL,CAAN,EAAgE;AAAEtC,EAAAA;AAAF,CAAhE,CAAP,CAA6FN,UAAU,CAACU,kBAAD,CAAvG,CAAf","sourcesContent":["import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport ToggleTextbox from \"../../../../../components/toggle-textbox/toggle-textbox\";\nimport TextEditor from \"../../../../../components/text-editor/text-editor\"\nimport { get_time_diff } from \"../../../../../utils/time-difference\";\nimport { connect } from \"react-redux\"\nimport { reqPostQuestion } from \"../../../../../api/api\"\nimport { reloadTaskDetail } from \"../../../../../redux/actions\"\n// TODO @SONIA\nconst { BASE } = global.constants;\n\nclass QuestionBoxSection extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            message: ''\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.match.params.id !== this.props.match.params.id) {\n            this.setState({ message: '' })\n        }\n    }\n\n    sendQuestion = async () => {\n        try {\n            const messageData = {\n                targetId: this.props.match.params.id,\n                content: this.state.message\n            }\n            const result = await reqPostQuestion(this.props.user.email, messageData);\n            if (result.status === 200) {\n                this.props.reloadTaskDetail(true);\n            }\n        } catch (e) {\n            alert('Failed to post question')\n        }\n    }\n\n    pushToGeneratedUrl = (pathname, data) => {\n        this.props.history.push(`${this.props.match.url}/${pathname}-question-${data.questionId}`);\n\n    }\n\n\n    render() {\n        const { pathname } = this.props.location;\n        const userEmail = this.props.user.email;\n        const { questions } = this.props.taskDetail.taskData;\n        const posterName = this.props.taskDetail.taskData.taskDetail && this.props.taskDetail.taskData.taskDetail.posterInfo.username;\n\n        return (\n            <div className=\"task-detail__question\">\n                <div className=\"splitter-section-name\">\n                    Questions({\n                        questions && questions.length !== 0 ? questions.length : 0  //  + questions.reduce((accum, current) => accum + current.replies.length,0)\n                    })\n                </div>\n                <div className=\"small-title bold\">\n                    Please don't share personal info – insurance won't apply to tasks not done through Airtasker!\n                </div>\n\n                {userEmail\n                    ?\n                    <TextEditor\n                        targetPerson={posterName}\n                        onChange={(e) => this.setState({ message: e.target.value })}\n                        value={this.state.message}\n                        onSubmit={() => { this.sendQuestion(); this.setState({ message: '' }) }}\n                    />\n                    :\n                    <div className=\"padder\">\n                        <h4>To join the conversation</h4>\n                        <Link className=\"green-button\" to={`${pathname}/signup`}>\n                            Sign Up\n                        </Link>\n                        or\n                        <Link className=\"green-button\" to={`${pathname}/login`}>\n                            Log In\n                        </Link>\n                    </div>\n                }\n\n                {questions && questions.map((question, index) => (\n                    <>\n                        <ToggleTextbox message={question} key={index} questionId={question._id} />\n                        {question.replies.map((message, index) => (\n                            <div className=\"task-detail__offer--reply\">\n                                <div className=\"avatar-image\">\n                                    <img src={message.senderInfo.photo && `${BASE}/upload/${message.senderInfo.photo.filename}`} alt=\"\" />\n                                </div>\n                                <div className=\"poster-detail__item--detail\">\n                                    <div className=\"user-name-holder\">\n                                        <Link to=\"\" className=\"user-name\">\n                                            {message.senderInfo.username}\n                                        </Link>\n                                    </div>\n                                    {message.content}\n                                    <div className=\"toggle-textbox__message--bottom\"><span>{get_time_diff(message.postDate)} ago</span>\n                                        {userEmail && <Link onClick={() => this.pushToGeneratedUrl('reply', { questionId: question._id })}>Reply</Link>}\n                                    </div>\n                                </div>\n                            </div>\n                        ))}\n                    </>\n                ))\n                }\n            </div>\n        );\n    }\n}\nexport default connect(state => ({ user: state.user, taskDetail: state.taskDetail }), { reloadTaskDetail })(withRouter(QuestionBoxSection))\n"]},"metadata":{},"sourceType":"module"}