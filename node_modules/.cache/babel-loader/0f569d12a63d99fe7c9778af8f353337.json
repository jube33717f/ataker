{"ast":null,"code":"'use strict';\n/**\n * Module dependencies.\n */\n\nconst contentDisposition = require('content-disposition');\n\nconst ensureErrorHandler = require('error-inject');\n\nconst getType = require('cache-content-type');\n\nconst onFinish = require('on-finished');\n\nconst escape = require('escape-html');\n\nconst typeis = require('type-is').is;\n\nconst statuses = require('statuses');\n\nconst destroy = require('destroy');\n\nconst assert = require('assert');\n\nconst extname = require('path').extname;\n\nconst vary = require('vary');\n\nconst only = require('only');\n\nconst util = require('util');\n\nconst encodeUrl = require('encodeurl');\n\nconst Stream = require('stream');\n/**\n * Prototype.\n */\n\n\nmodule.exports = {\n  /**\n   * Return the request socket.\n   *\n   * @return {Connection}\n   * @api public\n   */\n  get socket() {\n    return this.res.socket;\n  },\n\n  /**\n   * Return response header.\n   *\n   * @return {Object}\n   * @api public\n   */\n  get header() {\n    const {\n      res\n    } = this;\n    return typeof res.getHeaders === 'function' ? res.getHeaders() : res._headers || {}; // Node < 7.7\n  },\n\n  /**\n   * Return response header, alias as response.header\n   *\n   * @return {Object}\n   * @api public\n   */\n  get headers() {\n    return this.header;\n  },\n\n  /**\n   * Get response status code.\n   *\n   * @return {Number}\n   * @api public\n   */\n  get status() {\n    return this.res.statusCode;\n  },\n\n  /**\n   * Set response status code.\n   *\n   * @param {Number} code\n   * @api public\n   */\n  set status(code) {\n    if (this.headerSent) return;\n    assert(Number.isInteger(code), 'status code must be a number');\n    assert(code >= 100 && code <= 999, `invalid status code: ${code}`);\n    this._explicitStatus = true;\n    this.res.statusCode = code;\n    if (this.req.httpVersionMajor < 2) this.res.statusMessage = statuses[code];\n    if (this.body && statuses.empty[code]) this.body = null;\n  },\n\n  /**\n   * Get response status message\n   *\n   * @return {String}\n   * @api public\n   */\n  get message() {\n    return this.res.statusMessage || statuses[this.status];\n  },\n\n  /**\n   * Set response status message\n   *\n   * @param {String} msg\n   * @api public\n   */\n  set message(msg) {\n    this.res.statusMessage = msg;\n  },\n\n  /**\n   * Get response body.\n   *\n   * @return {Mixed}\n   * @api public\n   */\n  get body() {\n    return this._body;\n  },\n\n  /**\n   * Set response body.\n   *\n   * @param {String|Buffer|Object|Stream} val\n   * @api public\n   */\n  set body(val) {\n    const original = this._body;\n    this._body = val; // no content\n\n    if (null == val) {\n      if (!statuses.empty[this.status]) this.status = 204;\n      this.remove('Content-Type');\n      this.remove('Content-Length');\n      this.remove('Transfer-Encoding');\n      return;\n    } // set the status\n\n\n    if (!this._explicitStatus) this.status = 200; // set the content-type only if not yet set\n\n    const setType = !this.has('Content-Type'); // string\n\n    if ('string' == typeof val) {\n      if (setType) this.type = /^\\s*</.test(val) ? 'html' : 'text';\n      this.length = Buffer.byteLength(val);\n      return;\n    } // buffer\n\n\n    if (Buffer.isBuffer(val)) {\n      if (setType) this.type = 'bin';\n      this.length = val.length;\n      return;\n    } // stream\n\n\n    if ('function' == typeof val.pipe) {\n      onFinish(this.res, destroy.bind(null, val));\n      ensureErrorHandler(val, err => this.ctx.onerror(err)); // overwriting\n\n      if (null != original && original != val) this.remove('Content-Length');\n      if (setType) this.type = 'bin';\n      return;\n    } // json\n\n\n    this.remove('Content-Length');\n    this.type = 'json';\n  },\n\n  /**\n   * Set Content-Length field to `n`.\n   *\n   * @param {Number} n\n   * @api public\n   */\n  set length(n) {\n    this.set('Content-Length', n);\n  },\n\n  /**\n   * Return parsed response Content-Length when present.\n   *\n   * @return {Number}\n   * @api public\n   */\n  get length() {\n    if (this.has('Content-Length')) {\n      return parseInt(this.get('Content-Length'), 10) || 0;\n    }\n\n    const {\n      body\n    } = this;\n    if (!body || body instanceof Stream) return undefined;\n    if ('string' === typeof body) return Buffer.byteLength(body);\n    if (Buffer.isBuffer(body)) return body.length;\n    return Buffer.byteLength(JSON.stringify(body));\n  },\n\n  /**\n   * Check if a header has been written to the socket.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n  get headerSent() {\n    return this.res.headersSent;\n  },\n\n  /**\n   * Vary on `field`.\n   *\n   * @param {String} field\n   * @api public\n   */\n  vary(field) {\n    if (this.headerSent) return;\n    vary(this.res, field);\n  },\n\n  /**\n   * Perform a 302 redirect to `url`.\n   *\n   * The string \"back\" is special-cased\n   * to provide Referrer support, when Referrer\n   * is not present `alt` or \"/\" is used.\n   *\n   * Examples:\n   *\n   *    this.redirect('back');\n   *    this.redirect('back', '/index.html');\n   *    this.redirect('/login');\n   *    this.redirect('http://google.com');\n   *\n   * @param {String} url\n   * @param {String} [alt]\n   * @api public\n   */\n  redirect(url, alt) {\n    // location\n    if ('back' == url) url = this.ctx.get('Referrer') || alt || '/';\n    this.set('Location', encodeUrl(url)); // status\n\n    if (!statuses.redirect[this.status]) this.status = 302; // html\n\n    if (this.ctx.accepts('html')) {\n      url = escape(url);\n      this.type = 'text/html; charset=utf-8';\n      this.body = `Redirecting to <a href=\"${url}\">${url}</a>.`;\n      return;\n    } // text\n\n\n    this.type = 'text/plain; charset=utf-8';\n    this.body = `Redirecting to ${url}.`;\n  },\n\n  /**\n   * Set Content-Disposition header to \"attachment\" with optional `filename`.\n   *\n   * @param {String} filename\n   * @api public\n   */\n  attachment(filename, options) {\n    if (filename) this.type = extname(filename);\n    this.set('Content-Disposition', contentDisposition(filename, options));\n  },\n\n  /**\n   * Set Content-Type response header with `type` through `mime.lookup()`\n   * when it does not contain a charset.\n   *\n   * Examples:\n   *\n   *     this.type = '.html';\n   *     this.type = 'html';\n   *     this.type = 'json';\n   *     this.type = 'application/json';\n   *     this.type = 'png';\n   *\n   * @param {String} type\n   * @api public\n   */\n  set type(type) {\n    type = getType(type);\n\n    if (type) {\n      this.set('Content-Type', type);\n    } else {\n      this.remove('Content-Type');\n    }\n  },\n\n  /**\n   * Set the Last-Modified date using a string or a Date.\n   *\n   *     this.response.lastModified = new Date();\n   *     this.response.lastModified = '2013-09-13';\n   *\n   * @param {String|Date} type\n   * @api public\n   */\n  set lastModified(val) {\n    if ('string' == typeof val) val = new Date(val);\n    this.set('Last-Modified', val.toUTCString());\n  },\n\n  /**\n   * Get the Last-Modified date in Date form, if it exists.\n   *\n   * @return {Date}\n   * @api public\n   */\n  get lastModified() {\n    const date = this.get('last-modified');\n    if (date) return new Date(date);\n  },\n\n  /**\n   * Set the ETag of a response.\n   * This will normalize the quotes if necessary.\n   *\n   *     this.response.etag = 'md5hashsum';\n   *     this.response.etag = '\"md5hashsum\"';\n   *     this.response.etag = 'W/\"123456789\"';\n   *\n   * @param {String} etag\n   * @api public\n   */\n  set etag(val) {\n    if (!/^(W\\/)?\"/.test(val)) val = `\"${val}\"`;\n    this.set('ETag', val);\n  },\n\n  /**\n   * Get the ETag of a response.\n   *\n   * @return {String}\n   * @api public\n   */\n  get etag() {\n    return this.get('ETag');\n  },\n\n  /**\n   * Return the response mime type void of\n   * parameters such as \"charset\".\n   *\n   * @return {String}\n   * @api public\n   */\n  get type() {\n    const type = this.get('Content-Type');\n    if (!type) return '';\n    return type.split(';', 1)[0];\n  },\n\n  /**\n   * Check whether the response is one of the listed types.\n   * Pretty much the same as `this.request.is()`.\n   *\n   * @param {String|String[]} [type]\n   * @param {String[]} [types]\n   * @return {String|false}\n   * @api public\n   */\n  is(type, ...types) {\n    return typeis(this.type, type, ...types);\n  },\n\n  /**\n   * Return response header.\n   *\n   * Examples:\n   *\n   *     this.get('Content-Type');\n   *     // => \"text/plain\"\n   *\n   *     this.get('content-type');\n   *     // => \"text/plain\"\n   *\n   * @param {String} field\n   * @return {String}\n   * @api public\n   */\n  get(field) {\n    return this.header[field.toLowerCase()] || '';\n  },\n\n  /**\n   * Returns true if the header identified by name is currently set in the outgoing headers.\n   * The header name matching is case-insensitive.\n   *\n   * Examples:\n   *\n   *     this.has('Content-Type');\n   *     // => true\n   *\n   *     this.get('content-type');\n   *     // => true\n   *\n   * @param {String} field\n   * @return {boolean}\n   * @api public\n   */\n  has(field) {\n    return typeof this.res.hasHeader === 'function' ? this.res.hasHeader(field) // Node < 7.7\n    : field.toLowerCase() in this.headers;\n  },\n\n  /**\n   * Set header `field` to `val`, or pass\n   * an object of header fields.\n   *\n   * Examples:\n   *\n   *    this.set('Foo', ['bar', 'baz']);\n   *    this.set('Accept', 'application/json');\n   *    this.set({ Accept: 'text/plain', 'X-API-Key': 'tobi' });\n   *\n   * @param {String|Object|Array} field\n   * @param {String} val\n   * @api public\n   */\n  set(field, val) {\n    if (this.headerSent) return;\n\n    if (2 == arguments.length) {\n      if (Array.isArray(val)) val = val.map(v => typeof v === 'string' ? v : String(v));else if (typeof val !== 'string') val = String(val);\n      this.res.setHeader(field, val);\n    } else {\n      for (const key in field) {\n        this.set(key, field[key]);\n      }\n    }\n  },\n\n  /**\n   * Append additional header `field` with value `val`.\n   *\n   * Examples:\n   *\n   * ```\n   * this.append('Link', ['<http://localhost/>', '<http://localhost:3000/>']);\n   * this.append('Set-Cookie', 'foo=bar; Path=/; HttpOnly');\n   * this.append('Warning', '199 Miscellaneous warning');\n   * ```\n   *\n   * @param {String} field\n   * @param {String|Array} val\n   * @api public\n   */\n  append(field, val) {\n    const prev = this.get(field);\n\n    if (prev) {\n      val = Array.isArray(prev) ? prev.concat(val) : [prev].concat(val);\n    }\n\n    return this.set(field, val);\n  },\n\n  /**\n   * Remove header `field`.\n   *\n   * @param {String} name\n   * @api public\n   */\n  remove(field) {\n    if (this.headerSent) return;\n    this.res.removeHeader(field);\n  },\n\n  /**\n   * Checks if the request is writable.\n   * Tests for the existence of the socket\n   * as node sometimes does not set it.\n   *\n   * @return {Boolean}\n   * @api private\n   */\n  get writable() {\n    // can't write any more after response finished\n    // response.writableEnded is available since Node > 12.9\n    // https://nodejs.org/api/http.html#http_response_writableended\n    // response.finished is undocumented feature of previous Node versions\n    // https://stackoverflow.com/questions/16254385/undocumented-response-finished-in-node-js\n    if (this.res.writableEnded || this.res.finished) return false;\n    const socket = this.res.socket; // There are already pending outgoing res, but still writable\n    // https://github.com/nodejs/node/blob/v4.4.7/lib/_http_server.js#L486\n\n    if (!socket) return true;\n    return socket.writable;\n  },\n\n  /**\n   * Inspect implementation.\n   *\n   * @return {Object}\n   * @api public\n   */\n  inspect() {\n    if (!this.res) return;\n    const o = this.toJSON();\n    o.body = this.body;\n    return o;\n  },\n\n  /**\n   * Return JSON representation.\n   *\n   * @return {Object}\n   * @api public\n   */\n  toJSON() {\n    return only(this, ['status', 'message', 'header']);\n  },\n\n  /**\n   * Flush any set headers, and begin the body\n   */\n  flushHeaders() {\n    this.res.flushHeaders();\n  }\n\n};\n/**\n * Custom inspection implementation for newer Node.js versions.\n *\n * @return {Object}\n * @api public\n */\n\nif (util.inspect.custom) {\n  module.exports[util.inspect.custom] = module.exports.inspect;\n}","map":{"version":3,"sources":["/Users/jubi/fullStack/groupProject/0322/xyz.frontend/node_modules/koa/lib/response.js"],"names":["contentDisposition","require","ensureErrorHandler","getType","onFinish","escape","typeis","is","statuses","destroy","assert","extname","vary","only","util","encodeUrl","Stream","module","exports","socket","res","header","getHeaders","_headers","headers","status","statusCode","code","headerSent","Number","isInteger","_explicitStatus","req","httpVersionMajor","statusMessage","body","empty","message","msg","_body","val","original","remove","setType","has","type","test","length","Buffer","byteLength","isBuffer","pipe","bind","err","ctx","onerror","n","set","parseInt","get","undefined","JSON","stringify","headersSent","field","redirect","url","alt","accepts","attachment","filename","options","lastModified","Date","toUTCString","date","etag","split","types","toLowerCase","hasHeader","arguments","Array","isArray","map","v","String","setHeader","key","append","prev","concat","removeHeader","writable","writableEnded","finished","inspect","o","toJSON","flushHeaders","custom"],"mappings":"AACA;AAEA;;;;AAIA,MAAMA,kBAAkB,GAAGC,OAAO,CAAC,qBAAD,CAAlC;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,cAAD,CAAlC;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,oBAAD,CAAvB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,aAAD,CAAxB;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,aAAD,CAAtB;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,SAAD,CAAP,CAAmBM,EAAlC;;AACA,MAAMC,QAAQ,GAAGP,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMQ,OAAO,GAAGR,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMS,MAAM,GAAGT,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMU,OAAO,GAAGV,OAAO,CAAC,MAAD,CAAP,CAAgBU,OAAhC;;AACA,MAAMC,IAAI,GAAGX,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMY,IAAI,GAAGZ,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMa,IAAI,GAAGb,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMc,SAAS,GAAGd,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMe,MAAM,GAAGf,OAAO,CAAC,QAAD,CAAtB;AAEA;;;;;AAIAgB,MAAM,CAACC,OAAP,GAAiB;AAEf;;;;;;AAOA,MAAIC,MAAJ,GAAa;AACX,WAAO,KAAKC,GAAL,CAASD,MAAhB;AACD,GAXc;;AAaf;;;;;;AAOA,MAAIE,MAAJ,GAAa;AACX,UAAM;AAAED,MAAAA;AAAF,QAAU,IAAhB;AACA,WAAO,OAAOA,GAAG,CAACE,UAAX,KAA0B,UAA1B,GACHF,GAAG,CAACE,UAAJ,EADG,GAEHF,GAAG,CAACG,QAAJ,IAAgB,EAFpB,CAFW,CAIa;AACzB,GAzBc;;AA2Bf;;;;;;AAOA,MAAIC,OAAJ,GAAc;AACZ,WAAO,KAAKH,MAAZ;AACD,GApCc;;AAsCf;;;;;;AAOA,MAAII,MAAJ,GAAa;AACX,WAAO,KAAKL,GAAL,CAASM,UAAhB;AACD,GA/Cc;;AAiDf;;;;;;AAOA,MAAID,MAAJ,CAAWE,IAAX,EAAiB;AACf,QAAI,KAAKC,UAAT,EAAqB;AAErBlB,IAAAA,MAAM,CAACmB,MAAM,CAACC,SAAP,CAAiBH,IAAjB,CAAD,EAAyB,8BAAzB,CAAN;AACAjB,IAAAA,MAAM,CAACiB,IAAI,IAAI,GAAR,IAAeA,IAAI,IAAI,GAAxB,EAA8B,wBAAuBA,IAAK,EAA1D,CAAN;AACA,SAAKI,eAAL,GAAuB,IAAvB;AACA,SAAKX,GAAL,CAASM,UAAT,GAAsBC,IAAtB;AACA,QAAI,KAAKK,GAAL,CAASC,gBAAT,GAA4B,CAAhC,EAAmC,KAAKb,GAAL,CAASc,aAAT,GAAyB1B,QAAQ,CAACmB,IAAD,CAAjC;AACnC,QAAI,KAAKQ,IAAL,IAAa3B,QAAQ,CAAC4B,KAAT,CAAeT,IAAf,CAAjB,EAAuC,KAAKQ,IAAL,GAAY,IAAZ;AACxC,GAjEc;;AAmEf;;;;;;AAOA,MAAIE,OAAJ,GAAc;AACZ,WAAO,KAAKjB,GAAL,CAASc,aAAT,IAA0B1B,QAAQ,CAAC,KAAKiB,MAAN,CAAzC;AACD,GA5Ec;;AA8Ef;;;;;;AAOA,MAAIY,OAAJ,CAAYC,GAAZ,EAAiB;AACf,SAAKlB,GAAL,CAASc,aAAT,GAAyBI,GAAzB;AACD,GAvFc;;AAyFf;;;;;;AAOA,MAAIH,IAAJ,GAAW;AACT,WAAO,KAAKI,KAAZ;AACD,GAlGc;;AAoGf;;;;;;AAOA,MAAIJ,IAAJ,CAASK,GAAT,EAAc;AACZ,UAAMC,QAAQ,GAAG,KAAKF,KAAtB;AACA,SAAKA,KAAL,GAAaC,GAAb,CAFY,CAIZ;;AACA,QAAI,QAAQA,GAAZ,EAAiB;AACf,UAAI,CAAChC,QAAQ,CAAC4B,KAAT,CAAe,KAAKX,MAApB,CAAL,EAAkC,KAAKA,MAAL,GAAc,GAAd;AAClC,WAAKiB,MAAL,CAAY,cAAZ;AACA,WAAKA,MAAL,CAAY,gBAAZ;AACA,WAAKA,MAAL,CAAY,mBAAZ;AACA;AACD,KAXW,CAaZ;;;AACA,QAAI,CAAC,KAAKX,eAAV,EAA2B,KAAKN,MAAL,GAAc,GAAd,CAdf,CAgBZ;;AACA,UAAMkB,OAAO,GAAG,CAAC,KAAKC,GAAL,CAAS,cAAT,CAAjB,CAjBY,CAmBZ;;AACA,QAAI,YAAY,OAAOJ,GAAvB,EAA4B;AAC1B,UAAIG,OAAJ,EAAa,KAAKE,IAAL,GAAY,QAAQC,IAAR,CAAaN,GAAb,IAAoB,MAApB,GAA6B,MAAzC;AACb,WAAKO,MAAL,GAAcC,MAAM,CAACC,UAAP,CAAkBT,GAAlB,CAAd;AACA;AACD,KAxBW,CA0BZ;;;AACA,QAAIQ,MAAM,CAACE,QAAP,CAAgBV,GAAhB,CAAJ,EAA0B;AACxB,UAAIG,OAAJ,EAAa,KAAKE,IAAL,GAAY,KAAZ;AACb,WAAKE,MAAL,GAAcP,GAAG,CAACO,MAAlB;AACA;AACD,KA/BW,CAiCZ;;;AACA,QAAI,cAAc,OAAOP,GAAG,CAACW,IAA7B,EAAmC;AACjC/C,MAAAA,QAAQ,CAAC,KAAKgB,GAAN,EAAWX,OAAO,CAAC2C,IAAR,CAAa,IAAb,EAAmBZ,GAAnB,CAAX,CAAR;AACAtC,MAAAA,kBAAkB,CAACsC,GAAD,EAAMa,GAAG,IAAI,KAAKC,GAAL,CAASC,OAAT,CAAiBF,GAAjB,CAAb,CAAlB,CAFiC,CAIjC;;AACA,UAAI,QAAQZ,QAAR,IAAoBA,QAAQ,IAAID,GAApC,EAAyC,KAAKE,MAAL,CAAY,gBAAZ;AAEzC,UAAIC,OAAJ,EAAa,KAAKE,IAAL,GAAY,KAAZ;AACb;AACD,KA3CW,CA6CZ;;;AACA,SAAKH,MAAL,CAAY,gBAAZ;AACA,SAAKG,IAAL,GAAY,MAAZ;AACD,GA3Jc;;AA6Jf;;;;;;AAOA,MAAIE,MAAJ,CAAWS,CAAX,EAAc;AACZ,SAAKC,GAAL,CAAS,gBAAT,EAA2BD,CAA3B;AACD,GAtKc;;AAwKf;;;;;;AAOA,MAAIT,MAAJ,GAAa;AACX,QAAI,KAAKH,GAAL,CAAS,gBAAT,CAAJ,EAAgC;AAC9B,aAAOc,QAAQ,CAAC,KAAKC,GAAL,CAAS,gBAAT,CAAD,EAA6B,EAA7B,CAAR,IAA4C,CAAnD;AACD;;AAED,UAAM;AAAExB,MAAAA;AAAF,QAAW,IAAjB;AACA,QAAI,CAACA,IAAD,IAASA,IAAI,YAAYnB,MAA7B,EAAqC,OAAO4C,SAAP;AACrC,QAAI,aAAa,OAAOzB,IAAxB,EAA8B,OAAOa,MAAM,CAACC,UAAP,CAAkBd,IAAlB,CAAP;AAC9B,QAAIa,MAAM,CAACE,QAAP,CAAgBf,IAAhB,CAAJ,EAA2B,OAAOA,IAAI,CAACY,MAAZ;AAC3B,WAAOC,MAAM,CAACC,UAAP,CAAkBY,IAAI,CAACC,SAAL,CAAe3B,IAAf,CAAlB,CAAP;AACD,GAzLc;;AA2Lf;;;;;;AAOA,MAAIP,UAAJ,GAAiB;AACf,WAAO,KAAKR,GAAL,CAAS2C,WAAhB;AACD,GApMc;;AAsMf;;;;;;AAOAnD,EAAAA,IAAI,CAACoD,KAAD,EAAQ;AACV,QAAI,KAAKpC,UAAT,EAAqB;AAErBhB,IAAAA,IAAI,CAAC,KAAKQ,GAAN,EAAW4C,KAAX,CAAJ;AACD,GAjNc;;AAmNf;;;;;;;;;;;;;;;;;;AAmBAC,EAAAA,QAAQ,CAACC,GAAD,EAAMC,GAAN,EAAW;AACjB;AACA,QAAI,UAAUD,GAAd,EAAmBA,GAAG,GAAG,KAAKZ,GAAL,CAASK,GAAT,CAAa,UAAb,KAA4BQ,GAA5B,IAAmC,GAAzC;AACnB,SAAKV,GAAL,CAAS,UAAT,EAAqB1C,SAAS,CAACmD,GAAD,CAA9B,EAHiB,CAKjB;;AACA,QAAI,CAAC1D,QAAQ,CAACyD,QAAT,CAAkB,KAAKxC,MAAvB,CAAL,EAAqC,KAAKA,MAAL,GAAc,GAAd,CANpB,CAQjB;;AACA,QAAI,KAAK6B,GAAL,CAASc,OAAT,CAAiB,MAAjB,CAAJ,EAA8B;AAC5BF,MAAAA,GAAG,GAAG7D,MAAM,CAAC6D,GAAD,CAAZ;AACA,WAAKrB,IAAL,GAAY,0BAAZ;AACA,WAAKV,IAAL,GAAa,2BAA0B+B,GAAI,KAAIA,GAAI,OAAnD;AACA;AACD,KAdgB,CAgBjB;;;AACA,SAAKrB,IAAL,GAAY,2BAAZ;AACA,SAAKV,IAAL,GAAa,kBAAiB+B,GAAI,GAAlC;AACD,GAzPc;;AA2Pf;;;;;;AAOAG,EAAAA,UAAU,CAACC,QAAD,EAAWC,OAAX,EAAoB;AAC5B,QAAID,QAAJ,EAAc,KAAKzB,IAAL,GAAYlC,OAAO,CAAC2D,QAAD,CAAnB;AACd,SAAKb,GAAL,CAAS,qBAAT,EAAgCzD,kBAAkB,CAACsE,QAAD,EAAWC,OAAX,CAAlD;AACD,GArQc;;AAuQf;;;;;;;;;;;;;;;AAgBA,MAAI1B,IAAJ,CAASA,IAAT,EAAe;AACbA,IAAAA,IAAI,GAAG1C,OAAO,CAAC0C,IAAD,CAAd;;AACA,QAAIA,IAAJ,EAAU;AACR,WAAKY,GAAL,CAAS,cAAT,EAAyBZ,IAAzB;AACD,KAFD,MAEO;AACL,WAAKH,MAAL,CAAY,cAAZ;AACD;AACF,GA9Rc;;AAgSf;;;;;;;;;AAUA,MAAI8B,YAAJ,CAAiBhC,GAAjB,EAAsB;AACpB,QAAI,YAAY,OAAOA,GAAvB,EAA4BA,GAAG,GAAG,IAAIiC,IAAJ,CAASjC,GAAT,CAAN;AAC5B,SAAKiB,GAAL,CAAS,eAAT,EAA0BjB,GAAG,CAACkC,WAAJ,EAA1B;AACD,GA7Sc;;AA+Sf;;;;;;AAOA,MAAIF,YAAJ,GAAmB;AACjB,UAAMG,IAAI,GAAG,KAAKhB,GAAL,CAAS,eAAT,CAAb;AACA,QAAIgB,IAAJ,EAAU,OAAO,IAAIF,IAAJ,CAASE,IAAT,CAAP;AACX,GAzTc;;AA2Tf;;;;;;;;;;;AAYA,MAAIC,IAAJ,CAASpC,GAAT,EAAc;AACZ,QAAI,CAAC,WAAWM,IAAX,CAAgBN,GAAhB,CAAL,EAA2BA,GAAG,GAAI,IAAGA,GAAI,GAAd;AAC3B,SAAKiB,GAAL,CAAS,MAAT,EAAiBjB,GAAjB;AACD,GA1Uc;;AA4Uf;;;;;;AAOA,MAAIoC,IAAJ,GAAW;AACT,WAAO,KAAKjB,GAAL,CAAS,MAAT,CAAP;AACD,GArVc;;AAuVf;;;;;;;AAQA,MAAId,IAAJ,GAAW;AACT,UAAMA,IAAI,GAAG,KAAKc,GAAL,CAAS,cAAT,CAAb;AACA,QAAI,CAACd,IAAL,EAAW,OAAO,EAAP;AACX,WAAOA,IAAI,CAACgC,KAAL,CAAW,GAAX,EAAgB,CAAhB,EAAmB,CAAnB,CAAP;AACD,GAnWc;;AAqWf;;;;;;;;;AAUAtE,EAAAA,EAAE,CAACsC,IAAD,EAAO,GAAGiC,KAAV,EAAiB;AACjB,WAAOxE,MAAM,CAAC,KAAKuC,IAAN,EAAYA,IAAZ,EAAkB,GAAGiC,KAArB,CAAb;AACD,GAjXc;;AAmXf;;;;;;;;;;;;;;;AAgBAnB,EAAAA,GAAG,CAACK,KAAD,EAAQ;AACT,WAAO,KAAK3C,MAAL,CAAY2C,KAAK,CAACe,WAAN,EAAZ,KAAoC,EAA3C;AACD,GArYc;;AAuYf;;;;;;;;;;;;;;;;AAgBAnC,EAAAA,GAAG,CAACoB,KAAD,EAAQ;AACT,WAAO,OAAO,KAAK5C,GAAL,CAAS4D,SAAhB,KAA8B,UAA9B,GACH,KAAK5D,GAAL,CAAS4D,SAAT,CAAmBhB,KAAnB,CADG,CAEL;AAFK,MAGHA,KAAK,CAACe,WAAN,MAAuB,KAAKvD,OAHhC;AAID,GA5Zc;;AA8Zf;;;;;;;;;;;;;;AAeAiC,EAAAA,GAAG,CAACO,KAAD,EAAQxB,GAAR,EAAa;AACd,QAAI,KAAKZ,UAAT,EAAqB;;AAErB,QAAI,KAAKqD,SAAS,CAAClC,MAAnB,EAA2B;AACzB,UAAImC,KAAK,CAACC,OAAN,CAAc3C,GAAd,CAAJ,EAAwBA,GAAG,GAAGA,GAAG,CAAC4C,GAAJ,CAAQC,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAb,GAAwBA,CAAxB,GAA4BC,MAAM,CAACD,CAAD,CAA/C,CAAN,CAAxB,KACK,IAAI,OAAO7C,GAAP,KAAe,QAAnB,EAA6BA,GAAG,GAAG8C,MAAM,CAAC9C,GAAD,CAAZ;AAClC,WAAKpB,GAAL,CAASmE,SAAT,CAAmBvB,KAAnB,EAA0BxB,GAA1B;AACD,KAJD,MAIO;AACL,WAAK,MAAMgD,GAAX,IAAkBxB,KAAlB,EAAyB;AACvB,aAAKP,GAAL,CAAS+B,GAAT,EAAcxB,KAAK,CAACwB,GAAD,CAAnB;AACD;AACF;AACF,GAzbc;;AA2bf;;;;;;;;;;;;;;;AAgBAC,EAAAA,MAAM,CAACzB,KAAD,EAAQxB,GAAR,EAAa;AACjB,UAAMkD,IAAI,GAAG,KAAK/B,GAAL,CAASK,KAAT,CAAb;;AAEA,QAAI0B,IAAJ,EAAU;AACRlD,MAAAA,GAAG,GAAG0C,KAAK,CAACC,OAAN,CAAcO,IAAd,IACFA,IAAI,CAACC,MAAL,CAAYnD,GAAZ,CADE,GAEF,CAACkD,IAAD,EAAOC,MAAP,CAAcnD,GAAd,CAFJ;AAGD;;AAED,WAAO,KAAKiB,GAAL,CAASO,KAAT,EAAgBxB,GAAhB,CAAP;AACD,GArdc;;AAudf;;;;;;AAOAE,EAAAA,MAAM,CAACsB,KAAD,EAAQ;AACZ,QAAI,KAAKpC,UAAT,EAAqB;AAErB,SAAKR,GAAL,CAASwE,YAAT,CAAsB5B,KAAtB;AACD,GAlec;;AAoef;;;;;;;;AASA,MAAI6B,QAAJ,GAAe;AACb;AACA;AACA;AACA;AACA;AACA,QAAI,KAAKzE,GAAL,CAAS0E,aAAT,IAA0B,KAAK1E,GAAL,CAAS2E,QAAvC,EAAiD,OAAO,KAAP;AAEjD,UAAM5E,MAAM,GAAG,KAAKC,GAAL,CAASD,MAAxB,CARa,CASb;AACA;;AACA,QAAI,CAACA,MAAL,EAAa,OAAO,IAAP;AACb,WAAOA,MAAM,CAAC0E,QAAd;AACD,GA1fc;;AA4ff;;;;;;AAOAG,EAAAA,OAAO,GAAG;AACR,QAAI,CAAC,KAAK5E,GAAV,EAAe;AACf,UAAM6E,CAAC,GAAG,KAAKC,MAAL,EAAV;AACAD,IAAAA,CAAC,CAAC9D,IAAF,GAAS,KAAKA,IAAd;AACA,WAAO8D,CAAP;AACD,GAxgBc;;AA0gBf;;;;;;AAOAC,EAAAA,MAAM,GAAG;AACP,WAAOrF,IAAI,CAAC,IAAD,EAAO,CAChB,QADgB,EAEhB,SAFgB,EAGhB,QAHgB,CAAP,CAAX;AAKD,GAvhBc;;AAyhBf;;;AAGAsF,EAAAA,YAAY,GAAG;AACb,SAAK/E,GAAL,CAAS+E,YAAT;AACD;;AA9hBc,CAAjB;AAiiBA;;;;;;;AAMA,IAAIrF,IAAI,CAACkF,OAAL,CAAaI,MAAjB,EAAyB;AACvBnF,EAAAA,MAAM,CAACC,OAAP,CAAeJ,IAAI,CAACkF,OAAL,CAAaI,MAA5B,IAAsCnF,MAAM,CAACC,OAAP,CAAe8E,OAArD;AACD","sourcesContent":["\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nconst contentDisposition = require('content-disposition');\nconst ensureErrorHandler = require('error-inject');\nconst getType = require('cache-content-type');\nconst onFinish = require('on-finished');\nconst escape = require('escape-html');\nconst typeis = require('type-is').is;\nconst statuses = require('statuses');\nconst destroy = require('destroy');\nconst assert = require('assert');\nconst extname = require('path').extname;\nconst vary = require('vary');\nconst only = require('only');\nconst util = require('util');\nconst encodeUrl = require('encodeurl');\nconst Stream = require('stream');\n\n/**\n * Prototype.\n */\n\nmodule.exports = {\n\n  /**\n   * Return the request socket.\n   *\n   * @return {Connection}\n   * @api public\n   */\n\n  get socket() {\n    return this.res.socket;\n  },\n\n  /**\n   * Return response header.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  get header() {\n    const { res } = this;\n    return typeof res.getHeaders === 'function'\n      ? res.getHeaders()\n      : res._headers || {}; // Node < 7.7\n  },\n\n  /**\n   * Return response header, alias as response.header\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  get headers() {\n    return this.header;\n  },\n\n  /**\n   * Get response status code.\n   *\n   * @return {Number}\n   * @api public\n   */\n\n  get status() {\n    return this.res.statusCode;\n  },\n\n  /**\n   * Set response status code.\n   *\n   * @param {Number} code\n   * @api public\n   */\n\n  set status(code) {\n    if (this.headerSent) return;\n\n    assert(Number.isInteger(code), 'status code must be a number');\n    assert(code >= 100 && code <= 999, `invalid status code: ${code}`);\n    this._explicitStatus = true;\n    this.res.statusCode = code;\n    if (this.req.httpVersionMajor < 2) this.res.statusMessage = statuses[code];\n    if (this.body && statuses.empty[code]) this.body = null;\n  },\n\n  /**\n   * Get response status message\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get message() {\n    return this.res.statusMessage || statuses[this.status];\n  },\n\n  /**\n   * Set response status message\n   *\n   * @param {String} msg\n   * @api public\n   */\n\n  set message(msg) {\n    this.res.statusMessage = msg;\n  },\n\n  /**\n   * Get response body.\n   *\n   * @return {Mixed}\n   * @api public\n   */\n\n  get body() {\n    return this._body;\n  },\n\n  /**\n   * Set response body.\n   *\n   * @param {String|Buffer|Object|Stream} val\n   * @api public\n   */\n\n  set body(val) {\n    const original = this._body;\n    this._body = val;\n\n    // no content\n    if (null == val) {\n      if (!statuses.empty[this.status]) this.status = 204;\n      this.remove('Content-Type');\n      this.remove('Content-Length');\n      this.remove('Transfer-Encoding');\n      return;\n    }\n\n    // set the status\n    if (!this._explicitStatus) this.status = 200;\n\n    // set the content-type only if not yet set\n    const setType = !this.has('Content-Type');\n\n    // string\n    if ('string' == typeof val) {\n      if (setType) this.type = /^\\s*</.test(val) ? 'html' : 'text';\n      this.length = Buffer.byteLength(val);\n      return;\n    }\n\n    // buffer\n    if (Buffer.isBuffer(val)) {\n      if (setType) this.type = 'bin';\n      this.length = val.length;\n      return;\n    }\n\n    // stream\n    if ('function' == typeof val.pipe) {\n      onFinish(this.res, destroy.bind(null, val));\n      ensureErrorHandler(val, err => this.ctx.onerror(err));\n\n      // overwriting\n      if (null != original && original != val) this.remove('Content-Length');\n\n      if (setType) this.type = 'bin';\n      return;\n    }\n\n    // json\n    this.remove('Content-Length');\n    this.type = 'json';\n  },\n\n  /**\n   * Set Content-Length field to `n`.\n   *\n   * @param {Number} n\n   * @api public\n   */\n\n  set length(n) {\n    this.set('Content-Length', n);\n  },\n\n  /**\n   * Return parsed response Content-Length when present.\n   *\n   * @return {Number}\n   * @api public\n   */\n\n  get length() {\n    if (this.has('Content-Length')) {\n      return parseInt(this.get('Content-Length'), 10) || 0;\n    }\n\n    const { body } = this;\n    if (!body || body instanceof Stream) return undefined;\n    if ('string' === typeof body) return Buffer.byteLength(body);\n    if (Buffer.isBuffer(body)) return body.length;\n    return Buffer.byteLength(JSON.stringify(body));\n  },\n\n  /**\n   * Check if a header has been written to the socket.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  get headerSent() {\n    return this.res.headersSent;\n  },\n\n  /**\n   * Vary on `field`.\n   *\n   * @param {String} field\n   * @api public\n   */\n\n  vary(field) {\n    if (this.headerSent) return;\n\n    vary(this.res, field);\n  },\n\n  /**\n   * Perform a 302 redirect to `url`.\n   *\n   * The string \"back\" is special-cased\n   * to provide Referrer support, when Referrer\n   * is not present `alt` or \"/\" is used.\n   *\n   * Examples:\n   *\n   *    this.redirect('back');\n   *    this.redirect('back', '/index.html');\n   *    this.redirect('/login');\n   *    this.redirect('http://google.com');\n   *\n   * @param {String} url\n   * @param {String} [alt]\n   * @api public\n   */\n\n  redirect(url, alt) {\n    // location\n    if ('back' == url) url = this.ctx.get('Referrer') || alt || '/';\n    this.set('Location', encodeUrl(url));\n\n    // status\n    if (!statuses.redirect[this.status]) this.status = 302;\n\n    // html\n    if (this.ctx.accepts('html')) {\n      url = escape(url);\n      this.type = 'text/html; charset=utf-8';\n      this.body = `Redirecting to <a href=\"${url}\">${url}</a>.`;\n      return;\n    }\n\n    // text\n    this.type = 'text/plain; charset=utf-8';\n    this.body = `Redirecting to ${url}.`;\n  },\n\n  /**\n   * Set Content-Disposition header to \"attachment\" with optional `filename`.\n   *\n   * @param {String} filename\n   * @api public\n   */\n\n  attachment(filename, options) {\n    if (filename) this.type = extname(filename);\n    this.set('Content-Disposition', contentDisposition(filename, options));\n  },\n\n  /**\n   * Set Content-Type response header with `type` through `mime.lookup()`\n   * when it does not contain a charset.\n   *\n   * Examples:\n   *\n   *     this.type = '.html';\n   *     this.type = 'html';\n   *     this.type = 'json';\n   *     this.type = 'application/json';\n   *     this.type = 'png';\n   *\n   * @param {String} type\n   * @api public\n   */\n\n  set type(type) {\n    type = getType(type);\n    if (type) {\n      this.set('Content-Type', type);\n    } else {\n      this.remove('Content-Type');\n    }\n  },\n\n  /**\n   * Set the Last-Modified date using a string or a Date.\n   *\n   *     this.response.lastModified = new Date();\n   *     this.response.lastModified = '2013-09-13';\n   *\n   * @param {String|Date} type\n   * @api public\n   */\n\n  set lastModified(val) {\n    if ('string' == typeof val) val = new Date(val);\n    this.set('Last-Modified', val.toUTCString());\n  },\n\n  /**\n   * Get the Last-Modified date in Date form, if it exists.\n   *\n   * @return {Date}\n   * @api public\n   */\n\n  get lastModified() {\n    const date = this.get('last-modified');\n    if (date) return new Date(date);\n  },\n\n  /**\n   * Set the ETag of a response.\n   * This will normalize the quotes if necessary.\n   *\n   *     this.response.etag = 'md5hashsum';\n   *     this.response.etag = '\"md5hashsum\"';\n   *     this.response.etag = 'W/\"123456789\"';\n   *\n   * @param {String} etag\n   * @api public\n   */\n\n  set etag(val) {\n    if (!/^(W\\/)?\"/.test(val)) val = `\"${val}\"`;\n    this.set('ETag', val);\n  },\n\n  /**\n   * Get the ETag of a response.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get etag() {\n    return this.get('ETag');\n  },\n\n  /**\n   * Return the response mime type void of\n   * parameters such as \"charset\".\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get type() {\n    const type = this.get('Content-Type');\n    if (!type) return '';\n    return type.split(';', 1)[0];\n  },\n\n  /**\n   * Check whether the response is one of the listed types.\n   * Pretty much the same as `this.request.is()`.\n   *\n   * @param {String|String[]} [type]\n   * @param {String[]} [types]\n   * @return {String|false}\n   * @api public\n   */\n\n  is(type, ...types) {\n    return typeis(this.type, type, ...types);\n  },\n\n  /**\n   * Return response header.\n   *\n   * Examples:\n   *\n   *     this.get('Content-Type');\n   *     // => \"text/plain\"\n   *\n   *     this.get('content-type');\n   *     // => \"text/plain\"\n   *\n   * @param {String} field\n   * @return {String}\n   * @api public\n   */\n\n  get(field) {\n    return this.header[field.toLowerCase()] || '';\n  },\n\n  /**\n   * Returns true if the header identified by name is currently set in the outgoing headers.\n   * The header name matching is case-insensitive.\n   *\n   * Examples:\n   *\n   *     this.has('Content-Type');\n   *     // => true\n   *\n   *     this.get('content-type');\n   *     // => true\n   *\n   * @param {String} field\n   * @return {boolean}\n   * @api public\n   */\n  has(field) {\n    return typeof this.res.hasHeader === 'function'\n      ? this.res.hasHeader(field)\n      // Node < 7.7\n      : field.toLowerCase() in this.headers;\n  },\n\n  /**\n   * Set header `field` to `val`, or pass\n   * an object of header fields.\n   *\n   * Examples:\n   *\n   *    this.set('Foo', ['bar', 'baz']);\n   *    this.set('Accept', 'application/json');\n   *    this.set({ Accept: 'text/plain', 'X-API-Key': 'tobi' });\n   *\n   * @param {String|Object|Array} field\n   * @param {String} val\n   * @api public\n   */\n\n  set(field, val) {\n    if (this.headerSent) return;\n\n    if (2 == arguments.length) {\n      if (Array.isArray(val)) val = val.map(v => typeof v === 'string' ? v : String(v));\n      else if (typeof val !== 'string') val = String(val);\n      this.res.setHeader(field, val);\n    } else {\n      for (const key in field) {\n        this.set(key, field[key]);\n      }\n    }\n  },\n\n  /**\n   * Append additional header `field` with value `val`.\n   *\n   * Examples:\n   *\n   * ```\n   * this.append('Link', ['<http://localhost/>', '<http://localhost:3000/>']);\n   * this.append('Set-Cookie', 'foo=bar; Path=/; HttpOnly');\n   * this.append('Warning', '199 Miscellaneous warning');\n   * ```\n   *\n   * @param {String} field\n   * @param {String|Array} val\n   * @api public\n   */\n\n  append(field, val) {\n    const prev = this.get(field);\n\n    if (prev) {\n      val = Array.isArray(prev)\n        ? prev.concat(val)\n        : [prev].concat(val);\n    }\n\n    return this.set(field, val);\n  },\n\n  /**\n   * Remove header `field`.\n   *\n   * @param {String} name\n   * @api public\n   */\n\n  remove(field) {\n    if (this.headerSent) return;\n\n    this.res.removeHeader(field);\n  },\n\n  /**\n   * Checks if the request is writable.\n   * Tests for the existence of the socket\n   * as node sometimes does not set it.\n   *\n   * @return {Boolean}\n   * @api private\n   */\n\n  get writable() {\n    // can't write any more after response finished\n    // response.writableEnded is available since Node > 12.9\n    // https://nodejs.org/api/http.html#http_response_writableended\n    // response.finished is undocumented feature of previous Node versions\n    // https://stackoverflow.com/questions/16254385/undocumented-response-finished-in-node-js\n    if (this.res.writableEnded || this.res.finished) return false;\n\n    const socket = this.res.socket;\n    // There are already pending outgoing res, but still writable\n    // https://github.com/nodejs/node/blob/v4.4.7/lib/_http_server.js#L486\n    if (!socket) return true;\n    return socket.writable;\n  },\n\n  /**\n   * Inspect implementation.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  inspect() {\n    if (!this.res) return;\n    const o = this.toJSON();\n    o.body = this.body;\n    return o;\n  },\n\n  /**\n   * Return JSON representation.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  toJSON() {\n    return only(this, [\n      'status',\n      'message',\n      'header'\n    ]);\n  },\n\n  /**\n   * Flush any set headers, and begin the body\n   */\n  flushHeaders() {\n    this.res.flushHeaders();\n  }\n};\n\n/**\n * Custom inspection implementation for newer Node.js versions.\n *\n * @return {Object}\n * @api public\n */\nif (util.inspect.custom) {\n  module.exports[util.inspect.custom] = module.exports.inspect;\n}\n"]},"metadata":{},"sourceType":"script"}