{"ast":null,"code":"'use strict';\n\nconst co = require('co');\n\nconst compose = require('koa-compose');\n\nmodule.exports = convert;\n\nfunction convert(mw) {\n  if (typeof mw !== 'function') {\n    throw new TypeError('middleware must be a function');\n  }\n\n  if (mw.constructor.name !== 'GeneratorFunction') {\n    // assume it's Promise-based middleware\n    return mw;\n  }\n\n  const converted = function (ctx, next) {\n    return co.call(ctx, mw.call(ctx, createGenerator(next)));\n  };\n\n  converted._name = mw._name || mw.name;\n  return converted;\n}\n\nfunction* createGenerator(next) {\n  return yield next();\n} // convert.compose(mw, mw, mw)\n// convert.compose([mw, mw, mw])\n\n\nconvert.compose = function (arr) {\n  if (!Array.isArray(arr)) {\n    arr = Array.from(arguments);\n  }\n\n  return compose(arr.map(convert));\n};\n\nconvert.back = function (mw) {\n  if (typeof mw !== 'function') {\n    throw new TypeError('middleware must be a function');\n  }\n\n  if (mw.constructor.name === 'GeneratorFunction') {\n    // assume it's generator middleware\n    return mw;\n  }\n\n  const converted = function* (next) {\n    let ctx = this;\n    let called = false; // no need try...catch here, it's ok even `mw()` throw exception\n\n    yield Promise.resolve(mw(ctx, function () {\n      if (called) {\n        // guard against multiple next() calls\n        // https://github.com/koajs/compose/blob/4e3e96baf58b817d71bd44a8c0d78bb42623aa95/index.js#L36\n        return Promise.reject(new Error('next() called multiple times'));\n      }\n\n      called = true;\n      return co.call(ctx, next);\n    }));\n  };\n\n  converted._name = mw._name || mw.name;\n  return converted;\n};","map":{"version":3,"sources":["/Users/jubi/fullStack/groupProject/0322/xyz.frontend/node_modules/koa-convert/index.js"],"names":["co","require","compose","module","exports","convert","mw","TypeError","constructor","name","converted","ctx","next","call","createGenerator","_name","arr","Array","isArray","from","arguments","map","back","called","Promise","resolve","reject","Error"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,OAAjB;;AAEA,SAASA,OAAT,CAAkBC,EAAlB,EAAsB;AACpB,MAAI,OAAOA,EAAP,KAAc,UAAlB,EAA8B;AAC5B,UAAM,IAAIC,SAAJ,CAAc,+BAAd,CAAN;AACD;;AACD,MAAID,EAAE,CAACE,WAAH,CAAeC,IAAf,KAAwB,mBAA5B,EAAiD;AAC/C;AACA,WAAOH,EAAP;AACD;;AACD,QAAMI,SAAS,GAAG,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AACrC,WAAOZ,EAAE,CAACa,IAAH,CAAQF,GAAR,EAAaL,EAAE,CAACO,IAAH,CAAQF,GAAR,EAAaG,eAAe,CAACF,IAAD,CAA5B,CAAb,CAAP;AACD,GAFD;;AAGAF,EAAAA,SAAS,CAACK,KAAV,GAAkBT,EAAE,CAACS,KAAH,IAAYT,EAAE,CAACG,IAAjC;AACA,SAAOC,SAAP;AACD;;AAED,UAAWI,eAAX,CAA4BF,IAA5B,EAAkC;AAChC,SAAO,MAAMA,IAAI,EAAjB;AACD,C,CAED;AACA;;;AACAP,OAAO,CAACH,OAAR,GAAkB,UAAUc,GAAV,EAAe;AAC/B,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAL,EAAyB;AACvBA,IAAAA,GAAG,GAAGC,KAAK,CAACE,IAAN,CAAWC,SAAX,CAAN;AACD;;AACD,SAAOlB,OAAO,CAACc,GAAG,CAACK,GAAJ,CAAQhB,OAAR,CAAD,CAAd;AACD,CALD;;AAOAA,OAAO,CAACiB,IAAR,GAAe,UAAUhB,EAAV,EAAc;AAC3B,MAAI,OAAOA,EAAP,KAAc,UAAlB,EAA8B;AAC5B,UAAM,IAAIC,SAAJ,CAAc,+BAAd,CAAN;AACD;;AACD,MAAID,EAAE,CAACE,WAAH,CAAeC,IAAf,KAAwB,mBAA5B,EAAiD;AAC/C;AACA,WAAOH,EAAP;AACD;;AACD,QAAMI,SAAS,GAAG,WAAYE,IAAZ,EAAkB;AAClC,QAAID,GAAG,GAAG,IAAV;AACA,QAAIY,MAAM,GAAG,KAAb,CAFkC,CAGlC;;AACA,UAAMC,OAAO,CAACC,OAAR,CAAgBnB,EAAE,CAACK,GAAD,EAAM,YAAY;AACxC,UAAIY,MAAJ,EAAY;AACV;AACA;AACA,eAAOC,OAAO,CAACE,MAAR,CAAe,IAAIC,KAAJ,CAAU,8BAAV,CAAf,CAAP;AACD;;AACDJ,MAAAA,MAAM,GAAG,IAAT;AACA,aAAOvB,EAAE,CAACa,IAAH,CAAQF,GAAR,EAAaC,IAAb,CAAP;AACD,KARuB,CAAlB,CAAN;AASD,GAbD;;AAcAF,EAAAA,SAAS,CAACK,KAAV,GAAkBT,EAAE,CAACS,KAAH,IAAYT,EAAE,CAACG,IAAjC;AACA,SAAOC,SAAP;AACD,CAxBD","sourcesContent":["'use strict'\n\nconst co = require('co')\nconst compose = require('koa-compose')\n\nmodule.exports = convert\n\nfunction convert (mw) {\n  if (typeof mw !== 'function') {\n    throw new TypeError('middleware must be a function')\n  }\n  if (mw.constructor.name !== 'GeneratorFunction') {\n    // assume it's Promise-based middleware\n    return mw\n  }\n  const converted = function (ctx, next) {\n    return co.call(ctx, mw.call(ctx, createGenerator(next)))\n  }\n  converted._name = mw._name || mw.name\n  return converted\n}\n\nfunction * createGenerator (next) {\n  return yield next()\n}\n\n// convert.compose(mw, mw, mw)\n// convert.compose([mw, mw, mw])\nconvert.compose = function (arr) {\n  if (!Array.isArray(arr)) {\n    arr = Array.from(arguments)\n  }\n  return compose(arr.map(convert))\n}\n\nconvert.back = function (mw) {\n  if (typeof mw !== 'function') {\n    throw new TypeError('middleware must be a function')\n  }\n  if (mw.constructor.name === 'GeneratorFunction') {\n    // assume it's generator middleware\n    return mw\n  }\n  const converted = function * (next) {\n    let ctx = this\n    let called = false\n    // no need try...catch here, it's ok even `mw()` throw exception\n    yield Promise.resolve(mw(ctx, function () {\n      if (called) {\n        // guard against multiple next() calls\n        // https://github.com/koajs/compose/blob/4e3e96baf58b817d71bd44a8c0d78bb42623aa95/index.js#L36\n        return Promise.reject(new Error('next() called multiple times'))\n      }\n      called = true\n      return co.call(ctx, next)\n    }))\n  }\n  converted._name = mw._name || mw.name\n  return converted\n}\n"]},"metadata":{},"sourceType":"script"}