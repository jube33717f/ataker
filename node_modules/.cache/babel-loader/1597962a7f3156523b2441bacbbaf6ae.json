{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport { LOGIN_USER, ERROR_MSG, LOGOUT_USER, CHECK_USER } from \"./action-types\";\nimport '../pages/browse-tasks/redux/reducers/index';\nconst initUser = localStorage.getItem(\"user\") ? {\n  email: localStorage.getItem(\"user\")\n} : {};\n\nfunction user(state = initUser, action) {\n  switch (action.type) {\n    case LOGIN_USER:\n      return {\n        email: action.email\n      } || { ...state,\n        errMsg: \"unknown error\"\n      };\n    //未知错误报错信息：Error: Given action \"login_user\", reducer \"user\" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.\n\n    case ERROR_MSG:\n      const errMsg = action.msg;\n      return { ...state,\n        errMsg\n      };\n\n    case LOGOUT_USER:\n      return {};\n\n    case CHECK_USER:\n      const readyToBid = action.readyToBid;\n      return { ...state,\n        readyToBid\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n  user\n});","map":{"version":3,"sources":["/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/redux/reducer.js"],"names":["combineReducers","LOGIN_USER","ERROR_MSG","LOGOUT_USER","CHECK_USER","initUser","localStorage","getItem","email","user","state","action","type","errMsg","msg","readyToBid"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,WAAhC,EAA6CC,UAA7C,QAA+D,gBAA/D;AACA,OAAe,4CAAf;AACA,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,IAA+B;AAAEC,EAAAA,KAAK,EAAEF,YAAY,CAACC,OAAb,CAAqB,MAArB;AAAT,CAA/B,GAAyE,EAA1F;;AACA,SAASE,IAAT,CAAcC,KAAK,GAAGL,QAAtB,EAAgCM,MAAhC,EAAwC;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,UAAL;AACE,aAAO;AAAEO,QAAAA,KAAK,EAAEG,MAAM,CAACH;AAAhB,WAA2B,EAAE,GAAGE,KAAL;AAAYG,QAAAA,MAAM,EAAE;AAApB,OAAlC;AACF;;AACA,SAAKX,SAAL;AACE,YAAMW,MAAM,GAAGF,MAAM,CAACG,GAAtB;AACA,aAAO,EAAE,GAAGJ,KAAL;AAAYG,QAAAA;AAAZ,OAAP;;AACF,SAAKV,WAAL;AACE,aAAO,EAAP;;AACF,SAAKC,UAAL;AACE,YAAMW,UAAU,GAAGJ,MAAM,CAACI,UAA1B;AACA,aAAO,EAAE,GAAGL,KAAL;AAAYK,QAAAA;AAAZ,OAAP;;AACF;AACE,aAAOL,KAAP;AAbJ;AAeD;;AAED,eAAeV,eAAe,CAAC;AAAES,EAAAA;AAAF,CAAD,CAA9B","sourcesContent":["import { combineReducers } from \"redux\";\nimport { LOGIN_USER, ERROR_MSG, LOGOUT_USER, CHECK_USER } from \"./action-types\";\nimport {} from '../pages/browse-tasks/redux/reducers/index'\nconst initUser = localStorage.getItem(\"user\") ? { email: localStorage.getItem(\"user\") } : {};\nfunction user(state = initUser, action) {\n  switch (action.type) {\n    case LOGIN_USER:\n      return { email: action.email } || { ...state, errMsg: \"unknown error\" };\n    //未知错误报错信息：Error: Given action \"login_user\", reducer \"user\" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.\n    case ERROR_MSG:\n      const errMsg = action.msg;\n      return { ...state, errMsg };\n    case LOGOUT_USER:\n      return {};\n    case CHECK_USER:\n      const readyToBid = action.readyToBid;\n      return { ...state, readyToBid }\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({ user });\n"]},"metadata":{},"sourceType":"module"}