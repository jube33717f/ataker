{"ast":null,"code":"var _jsxFileName = \"/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/browse-tasks/task-menu/auto-complete.js\";\nimport React, { useRef } from 'react';\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete';\nimport useOnclickOutside from 'react-cool-onclickoutside';\nimport \"./task-menu.scss\";\nimport Script from 'react-load-script';\n\nclass InputAuto extends React.Component {\n  handleScriptCreate() {\n    this.setState({\n      scriptLoaded: false\n    });\n  }\n\n  handleScriptError() {\n    this.setState({\n      scriptError: true\n    });\n  }\n\n  handleScriptLoad() {\n    this.setState({\n      scriptLoaded: true\n    });\n  }\n\n  render() {\n    const {\n      ready,\n      value,\n      suggestions: {\n        status,\n        data\n      },\n      setValue,\n      clearSuggestions\n    } = usePlacesAutocomplete({\n      // requestOptions: { /* Define search scope here */ }\n      debounce: 300\n    });\n    const ref = useRef();\n    useOnclickOutside(ref, () => {\n      // When user clicks outside of the component, we can dismiss\n      // the searched suggestions by calling this method\n      clearSuggestions();\n    });\n\n    const handleInput = e => {\n      // Update the keyword of the input element\n      setValue(e.target.value);\n    };\n\n    const handleSelect = ({\n      description\n    }) => () => {\n      // When user selects a place, we can replace the keyword without request data from API\n      // by setting the second parameter as \"false\"\n      setValue(description, false);\n      clearSuggestions(); // Get latitude and longitude via utility functions\n\n      getGeocode({\n        address: description\n      }).then(results => getLatLng(results[0])).then(({\n        lat,\n        lng\n      }) => {\n        console.log('📍 Coordinates: ', {\n          lat,\n          lng\n        });\n      }).catch(error => {\n        console.log('😱 Error: ', error);\n      });\n    };\n\n    const renderSuggestions = () => data.map(suggestion => {\n      const {\n        id,\n        structured_formatting: {\n          main_text,\n          secondary_text\n        }\n      } = suggestion;\n      return React.createElement(\"li\", {\n        key: id,\n        onClick: handleSelect(suggestion),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, main_text), \" \", React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, secondary_text));\n    });\n\n    return React.createElement(React.Fragment, null, React.createElement(Script, {\n      url: \"https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js\",\n      onCreate: this.handleScriptCreate.bind(this),\n      onError: this.handleScriptError.bind(this),\n      onLoad: this.handleScriptLoad.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      ref: ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"location--typehead--search\",\n      value: value,\n      onChange: handleInput,\n      disabled: !ready,\n      placeholder: \"Enter a suburb\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), status === 'OK' && React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, renderSuggestions())));\n  }\n\n}\n\nexport default InputAuto;","map":{"version":3,"sources":["/Users/jubi/fullStack/groupProject/0322/xyz.frontend/src/pages/browse-tasks/task-menu/auto-complete.js"],"names":["React","useRef","usePlacesAutocomplete","getGeocode","getLatLng","useOnclickOutside","Script","InputAuto","Component","handleScriptCreate","setState","scriptLoaded","handleScriptError","scriptError","handleScriptLoad","render","ready","value","suggestions","status","data","setValue","clearSuggestions","debounce","ref","handleInput","e","target","handleSelect","description","address","then","results","lat","lng","console","log","catch","error","renderSuggestions","map","suggestion","id","structured_formatting","main_text","secondary_text","bind"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete';\nimport useOnclickOutside from 'react-cool-onclickoutside';\nimport \"./task-menu.scss\";\nimport Script from 'react-load-script';\n\nclass InputAuto extends React.Component {\n    \n    handleScriptCreate() {\n        this.setState({ scriptLoaded: false })\n    }\n       \n    handleScriptError() {\n        this.setState({ scriptError: true })\n    }\n       \n    handleScriptLoad() {\n       this.setState({ scriptLoaded: true })\n    }\n    render() {\n        const {\n            ready,\n            value,\n            suggestions: { status, data },\n            setValue,\n            clearSuggestions\n          } = usePlacesAutocomplete({\n            // requestOptions: { /* Define search scope here */ }\n            debounce: 300\n          });\n          const ref = useRef();\n          useOnclickOutside(ref, () => {\n            // When user clicks outside of the component, we can dismiss\n            // the searched suggestions by calling this method\n            clearSuggestions();\n          });\n        \n          const handleInput = e => {\n            // Update the keyword of the input element\n            setValue(e.target.value);\n          };\n        \n          const handleSelect = ({ description }) => () => {\n            // When user selects a place, we can replace the keyword without request data from API\n            // by setting the second parameter as \"false\"\n            setValue(description, false);\n            clearSuggestions();\n        \n            // Get latitude and longitude via utility functions\n            getGeocode({ address: description })\n              .then(results => getLatLng(results[0]))\n              .then(({ lat, lng }) => {\n                console.log('📍 Coordinates: ', { lat, lng });\n              }).catch(error => {\n                console.log('😱 Error: ', error)\n              });\n          };\n        \n          const renderSuggestions = () =>\n            data.map(suggestion => {\n              const {\n                id,\n                structured_formatting: { main_text, secondary_text }\n              } = suggestion;\n        \n              return (\n                <li\n                  key={id}\n                  onClick={handleSelect(suggestion)}\n                >\n                  <strong>{main_text}</strong> <small>{secondary_text}</small>\n                </li>\n              );\n            });\n        return (\n          <>\n             <Script\n              url=\"https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js\"\n              onCreate={this.handleScriptCreate.bind(this)}\n              onError={this.handleScriptError.bind(this)}\n              onLoad={this.handleScriptLoad.bind(this)}/>\n            <div ref={ref}>\n                <input\n                    className=\"location--typehead--search\"\n                    value={value}\n                    onChange={handleInput}\n                    disabled={!ready}\n                    placeholder=\"Enter a suburb\"\n                />\n                {/* We can use the \"status\" to decide whether we should display the dropdown or not */}\n                {status === 'OK' && <ul>{renderSuggestions()}</ul>}\n            </div>\n          </>\n        )\n    }\n}\nexport default InputAuto;"]},"metadata":{},"sourceType":"module"}